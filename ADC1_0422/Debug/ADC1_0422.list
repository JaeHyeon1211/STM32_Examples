
ADC1_0422.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000339c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080034a8  080034a8  000134a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800358c  0800358c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800358c  0800358c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800358c  0800358c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000070  08003604  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003604  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006dfa  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001800  00000000  00000000  00026e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00028698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  00028e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001814b  00000000  00000000  000295e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008929  00000000  00000000  0004172b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088564  00000000  00000000  0004a054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d25b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c8  00000000  00000000  000d2608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003490 	.word	0x08003490

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003490 	.word	0x08003490

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 f866 	bl	800222e <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000bc 	.word	0x200000bc

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000174:	f000 fb00 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000178:	f000 f824 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017c:	f000 f8e2 	bl	8000344 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000180:	f000 f8b6 	bl	80002f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000184:	f000 f876 	bl	8000274 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000188:	480b      	ldr	r0, [pc, #44]	; (80001b8 <main+0x48>)
 800018a:	f000 fc53 	bl	8000a34 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800018e:	210a      	movs	r1, #10
 8000190:	4809      	ldr	r0, [pc, #36]	; (80001b8 <main+0x48>)
 8000192:	f000 fcfd 	bl	8000b90 <HAL_ADC_PollForConversion>
	  ADC_value = HAL_ADC_GetValue(&hadc1);
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <main+0x48>)
 8000198:	f000 fe00 	bl	8000d9c <HAL_ADC_GetValue>
 800019c:	4603      	mov	r3, r0
 800019e:	4a07      	ldr	r2, [pc, #28]	; (80001bc <main+0x4c>)
 80001a0:	6013      	str	r3, [r2, #0]
	  printf("ADC Value = %ld\n\r", ADC_value);
 80001a2:	4b06      	ldr	r3, [pc, #24]	; (80001bc <main+0x4c>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <main+0x50>)
 80001aa:	f002 f9dd 	bl	8002568 <iprintf>
	  HAL_Delay(1000);
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	f000 fb43 	bl	800083c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80001b6:	e7e7      	b.n	8000188 <main+0x18>
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	20000100 	.word	0x20000100
 80001c0:	080034a8 	.word	0x080034a8

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b094      	sub	sp, #80	; 0x50
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f002 f9c0 	bl	8002558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f4:	2302      	movs	r3, #2
 80001f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	2301      	movs	r3, #1
 80001fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fc:	2310      	movs	r3, #16
 80001fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000200:	2302      	movs	r3, #2
 8000202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000204:	2300      	movs	r3, #0
 8000206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000208:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800020c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fa2e 	bl	8001674 <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800021e:	f000 f8ff 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000232:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fc9a 	bl	8001b78 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800024a:	f000 f8e9 	bl	8000420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800024e:	2302      	movs	r3, #2
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000252:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000256:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fe24 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000266:	f000 f8db 	bl	8000420 <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3750      	adds	r7, #80	; 0x50
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <MX_ADC1_Init+0x78>)
 8000288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000292:	2201      	movs	r2, #1
 8000294:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <MX_ADC1_Init+0x74>)
 800029e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a4:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002b2:	f000 fae7 	bl	8000884 <HAL_ADC_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002bc:	f000 f8b0 	bl	8000420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002c8:	2307      	movs	r3, #7
 80002ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4619      	mov	r1, r3
 80002d0:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002d2:	f000 fd6f 	bl	8000db4 <HAL_ADC_ConfigChannel>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002dc:	f000 f8a0 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	2000008c 	.word	0x2000008c
 80002ec:	40012400 	.word	0x40012400

080002f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART2_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_USART2_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART2_UART_Init+0x4c>)
 80002fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART2_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART2_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000328:	f001 ff34 	bl	8002194 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f875 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000bc 	.word	0x200000bc
 8000340:	40004400 	.word	0x40004400

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <MX_GPIO_Init+0xcc>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a2c      	ldr	r2, [pc, #176]	; (8000410 <MX_GPIO_Init+0xcc>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <MX_GPIO_Init+0xcc>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b27      	ldr	r3, [pc, #156]	; (8000410 <MX_GPIO_Init+0xcc>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a26      	ldr	r2, [pc, #152]	; (8000410 <MX_GPIO_Init+0xcc>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b24      	ldr	r3, [pc, #144]	; (8000410 <MX_GPIO_Init+0xcc>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <MX_GPIO_Init+0xcc>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a20      	ldr	r2, [pc, #128]	; (8000410 <MX_GPIO_Init+0xcc>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <MX_GPIO_Init+0xcc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_GPIO_Init+0xcc>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <MX_GPIO_Init+0xcc>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_GPIO_Init+0xcc>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	4815      	ldr	r0, [pc, #84]	; (8000414 <MX_GPIO_Init+0xd0>)
 80003be:	f001 f91f 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_GPIO_Init+0xd4>)
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	4811      	ldr	r0, [pc, #68]	; (800041c <MX_GPIO_Init+0xd8>)
 80003d8:	f000 ff8e 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003dc:	2320      	movs	r3, #32
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4808      	ldr	r0, [pc, #32]	; (8000414 <MX_GPIO_Init+0xd0>)
 80003f4:	f000 ff80 	bl	80012f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	2028      	movs	r0, #40	; 0x28
 80003fe:	f000 ff44 	bl	800128a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000402:	2028      	movs	r0, #40	; 0x28
 8000404:	f000 ff5d 	bl	80012c2 <HAL_NVIC_EnableIRQ>

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000
 8000414:	40010800 	.word	0x40010800
 8000418:	10110000 	.word	0x10110000
 800041c:	40011000 	.word	0x40011000

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <HAL_MspInit+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x5c>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_MspInit+0x60>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <HAL_MspInit+0x60>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a14      	ldr	r2, [pc, #80]	; (80004fc <HAL_ADC_MspInit+0x6c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d121      	bne.n	80004f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004b0:	4b13      	ldr	r3, [pc, #76]	; (8000500 <HAL_ADC_MspInit+0x70>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a12      	ldr	r2, [pc, #72]	; (8000500 <HAL_ADC_MspInit+0x70>)
 80004b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <HAL_ADC_MspInit+0x70>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <HAL_ADC_MspInit+0x70>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <HAL_ADC_MspInit+0x70>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <HAL_ADC_MspInit+0x70>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004e0:	2301      	movs	r3, #1
 80004e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e4:	2303      	movs	r3, #3
 80004e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <HAL_ADC_MspInit+0x74>)
 80004f0:	f000 ff02 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40012400 	.word	0x40012400
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800

08000508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <HAL_UART_MspInit+0x70>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d123      	bne.n	8000570 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <HAL_UART_MspInit+0x74>)
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	4a13      	ldr	r2, [pc, #76]	; (800057c <HAL_UART_MspInit+0x74>)
 800052e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000532:	61d3      	str	r3, [r2, #28]
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <HAL_UART_MspInit+0x74>)
 8000536:	69db      	ldr	r3, [r3, #28]
 8000538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <HAL_UART_MspInit+0x74>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <HAL_UART_MspInit+0x74>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_UART_MspInit+0x74>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000558:	230c      	movs	r3, #12
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	2302      	movs	r3, #2
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2302      	movs	r3, #2
 8000562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <HAL_UART_MspInit+0x78>)
 800056c:	f000 fec4 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40004400 	.word	0x40004400
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ca:	f000 f91b 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005da:	f001 f829 	bl	8001630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	e00a      	b.n	800060a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005f4:	f3af 8000 	nop.w
 80005f8:	4601      	mov	r1, r0
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	60ba      	str	r2, [r7, #8]
 8000600:	b2ca      	uxtb	r2, r1
 8000602:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	3301      	adds	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	697a      	ldr	r2, [r7, #20]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	429a      	cmp	r2, r3
 8000610:	dbf0      	blt.n	80005f4 <_read+0x12>
	}

return len;
 8000612:	687b      	ldr	r3, [r7, #4]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	e009      	b.n	8000642 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	60ba      	str	r2, [r7, #8]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fd88 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	3301      	adds	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	429a      	cmp	r2, r3
 8000648:	dbf1      	blt.n	800062e <_write+0x12>
	}
	return len;
 800064a:	687b      	ldr	r3, [r7, #4]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <_close>:

int _close(int file)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	return -1;
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800067a:	605a      	str	r2, [r3, #4]
	return 0;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <_isatty>:

int _isatty(int file)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	return 1;
 8000690:	2301      	movs	r3, #1
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
	return 0;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <_sbrk+0x5c>)
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <_sbrk+0x60>)
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <_sbrk+0x64>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <_sbrk+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d207      	bcs.n	80006f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e4:	f001 ff0e 	bl	8002504 <__errno>
 80006e8:	4603      	mov	r3, r0
 80006ea:	220c      	movs	r2, #12
 80006ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	e009      	b.n	8000708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	4a05      	ldr	r2, [pc, #20]	; (8000718 <_sbrk+0x64>)
 8000704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20005000 	.word	0x20005000
 8000714:	00000400 	.word	0x00000400
 8000718:	20000104 	.word	0x20000104
 800071c:	20000120 	.word	0x20000120

08000720 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800072e:	490d      	ldr	r1, [pc, #52]	; (8000764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000744:	4c0a      	ldr	r4, [pc, #40]	; (8000770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000752:	f7ff ffe5 	bl	8000720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000756:	f001 fedb 	bl	8002510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075a:	f7ff fd09 	bl	8000170 <main>
  bx lr
 800075e:	4770      	bx	lr
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000768:	08003594 	.word	0x08003594
  ldr r2, =_sbss
 800076c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000770:	2000011c 	.word	0x2000011c

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_Init+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_Init+0x28>)
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 fd73 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f808 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000794:	f7ff fe4a 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40022000 	.word	0x40022000

080007a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_InitTick+0x54>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x58>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fd8b 	bl	80012de <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00e      	b.n	80007f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d80a      	bhi.n	80007ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f000 fd53 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_InitTick+0x5c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a03      	ldr	r2, [pc, #12]	; (8000824 <HAL_IncTick+0x20>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000008 	.word	0x20000008
 8000824:	20000108 	.word	0x20000108

08000828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	20000108 	.word	0x20000108

0800083c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000844:	f7ff fff0 	bl	8000828 <HAL_GetTick>
 8000848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000854:	d005      	beq.n	8000862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_Delay+0x44>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000862:	bf00      	nop
 8000864:	f7ff ffe0 	bl	8000828 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	429a      	cmp	r2, r3
 8000872:	d8f7      	bhi.n	8000864 <HAL_Delay+0x28>
  {
  }
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000008 	.word	0x20000008

08000884 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800088c:	2300      	movs	r3, #0
 800088e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d101      	bne.n	80008a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e0be      	b.n	8000a24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d109      	bne.n	80008c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fde4 	bl	8000490 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 fbc5 	bl	8001058 <ADC_ConversionStop_Disable>
 80008ce:	4603      	mov	r3, r0
 80008d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f040 8099 	bne.w	8000a12 <HAL_ADC_Init+0x18e>
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8095 	bne.w	8000a12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008f0:	f023 0302 	bic.w	r3, r3, #2
 80008f4:	f043 0202 	orr.w	r2, r3, #2
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000904:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7b1b      	ldrb	r3, [r3, #12]
 800090a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800090c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	4313      	orrs	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800091c:	d003      	beq.n	8000926 <HAL_ADC_Init+0xa2>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d102      	bne.n	800092c <HAL_ADC_Init+0xa8>
 8000926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092a:	e000      	b.n	800092e <HAL_ADC_Init+0xaa>
 800092c:	2300      	movs	r3, #0
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7d1b      	ldrb	r3, [r3, #20]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d119      	bne.n	8000970 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7b1b      	ldrb	r3, [r3, #12]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d109      	bne.n	8000958 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	3b01      	subs	r3, #1
 800094a:	035a      	lsls	r2, r3, #13
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	4313      	orrs	r3, r2
 8000950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	e00b      	b.n	8000970 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095c:	f043 0220 	orr.w	r2, r3, #32
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000968:	f043 0201 	orr.w	r2, r3, #1
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	430a      	orrs	r2, r1
 8000982:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <HAL_ADC_Init+0x1a8>)
 800098c:	4013      	ands	r3, r2
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	68b9      	ldr	r1, [r7, #8]
 8000994:	430b      	orrs	r3, r1
 8000996:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009a0:	d003      	beq.n	80009aa <HAL_ADC_Init+0x126>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d104      	bne.n	80009b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	051b      	lsls	r3, r3, #20
 80009b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_ADC_Init+0x1ac>)
 80009d0:	4013      	ands	r3, r2
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d10b      	bne.n	80009f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e2:	f023 0303 	bic.w	r3, r3, #3
 80009e6:	f043 0201 	orr.w	r2, r3, #1
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009ee:	e018      	b.n	8000a22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f4:	f023 0312 	bic.w	r3, r3, #18
 80009f8:	f043 0210 	orr.w	r2, r3, #16
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a04:	f043 0201 	orr.w	r2, r3, #1
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a10:	e007      	b.n	8000a22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a16:	f043 0210 	orr.w	r2, r3, #16
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	ffe1f7fd 	.word	0xffe1f7fd
 8000a30:	ff1f0efe 	.word	0xff1f0efe

08000a34 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d101      	bne.n	8000a4e <HAL_ADC_Start+0x1a>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e098      	b.n	8000b80 <HAL_ADC_Start+0x14c>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 faa4 	bl	8000fa4 <ADC_Enable>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f040 8087 	bne.w	8000b76 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a70:	f023 0301 	bic.w	r3, r3, #1
 8000a74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a41      	ldr	r2, [pc, #260]	; (8000b88 <HAL_ADC_Start+0x154>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d105      	bne.n	8000a92 <HAL_ADC_Start+0x5e>
 8000a86:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <HAL_ADC_Start+0x158>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d115      	bne.n	8000abe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d026      	beq.n	8000afa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ab4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000abc:	e01d      	b.n	8000afa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <HAL_ADC_Start+0x158>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d004      	beq.n	8000ade <HAL_ADC_Start+0xaa>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <HAL_ADC_Start+0x154>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d10d      	bne.n	8000afa <HAL_ADC_Start+0xc6>
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <HAL_ADC_Start+0x158>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d007      	beq.n	8000afa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000af2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0a:	f023 0206 	bic.w	r2, r3, #6
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b12:	e002      	b.n	8000b1a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f06f 0202 	mvn.w	r2, #2
 8000b2a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b3a:	d113      	bne.n	8000b64 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b40:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_ADC_Start+0x154>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d105      	bne.n	8000b52 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_ADC_Start+0x158>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d108      	bne.n	8000b64 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	e00c      	b.n	8000b7e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	e003      	b.n	8000b7e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40012800 	.word	0x40012800
 8000b8c:	40012400 	.word	0x40012400

08000b90 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ba6:	f7ff fe3f 	bl	8000828 <HAL_GetTick>
 8000baa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00b      	beq.n	8000bd2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbe:	f043 0220 	orr.w	r2, r3, #32
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e0d3      	b.n	8000d7a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d131      	bne.n	8000c44 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d12a      	bne.n	8000c44 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bee:	e021      	b.n	8000c34 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf6:	d01d      	beq.n	8000c34 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <HAL_ADC_PollForConversion+0x7e>
 8000bfe:	f7ff fe13 	bl	8000828 <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d212      	bcs.n	8000c34 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10b      	bne.n	8000c34 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f043 0204 	orr.w	r2, r3, #4
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e0a2      	b.n	8000d7a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0d6      	beq.n	8000bf0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c42:	e070      	b.n	8000d26 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000c44:	4b4f      	ldr	r3, [pc, #316]	; (8000d84 <HAL_ADC_PollForConversion+0x1f4>)
 8000c46:	681c      	ldr	r4, [r3, #0]
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f001 f9e3 	bl	8002014 <HAL_RCCEx_GetPeriphCLKFreq>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6919      	ldr	r1, [r3, #16]
 8000c5a:	4b4b      	ldr	r3, [pc, #300]	; (8000d88 <HAL_ADC_PollForConversion+0x1f8>)
 8000c5c:	400b      	ands	r3, r1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d118      	bne.n	8000c94 <HAL_ADC_PollForConversion+0x104>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68d9      	ldr	r1, [r3, #12]
 8000c68:	4b48      	ldr	r3, [pc, #288]	; (8000d8c <HAL_ADC_PollForConversion+0x1fc>)
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <HAL_ADC_PollForConversion+0x104>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6919      	ldr	r1, [r3, #16]
 8000c76:	4b46      	ldr	r3, [pc, #280]	; (8000d90 <HAL_ADC_PollForConversion+0x200>)
 8000c78:	400b      	ands	r3, r1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d108      	bne.n	8000c90 <HAL_ADC_PollForConversion+0x100>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68d9      	ldr	r1, [r3, #12]
 8000c84:	4b43      	ldr	r3, [pc, #268]	; (8000d94 <HAL_ADC_PollForConversion+0x204>)
 8000c86:	400b      	ands	r3, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <HAL_ADC_PollForConversion+0x100>
 8000c8c:	2314      	movs	r3, #20
 8000c8e:	e020      	b.n	8000cd2 <HAL_ADC_PollForConversion+0x142>
 8000c90:	2329      	movs	r3, #41	; 0x29
 8000c92:	e01e      	b.n	8000cd2 <HAL_ADC_PollForConversion+0x142>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6919      	ldr	r1, [r3, #16]
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <HAL_ADC_PollForConversion+0x200>)
 8000c9c:	400b      	ands	r3, r1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d106      	bne.n	8000cb0 <HAL_ADC_PollForConversion+0x120>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68d9      	ldr	r1, [r3, #12]
 8000ca8:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <HAL_ADC_PollForConversion+0x204>)
 8000caa:	400b      	ands	r3, r1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00d      	beq.n	8000ccc <HAL_ADC_PollForConversion+0x13c>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6919      	ldr	r1, [r3, #16]
 8000cb6:	4b38      	ldr	r3, [pc, #224]	; (8000d98 <HAL_ADC_PollForConversion+0x208>)
 8000cb8:	400b      	ands	r3, r1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d108      	bne.n	8000cd0 <HAL_ADC_PollForConversion+0x140>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68d9      	ldr	r1, [r3, #12]
 8000cc4:	4b34      	ldr	r3, [pc, #208]	; (8000d98 <HAL_ADC_PollForConversion+0x208>)
 8000cc6:	400b      	ands	r3, r1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <HAL_ADC_PollForConversion+0x140>
 8000ccc:	2354      	movs	r3, #84	; 0x54
 8000cce:	e000      	b.n	8000cd2 <HAL_ADC_PollForConversion+0x142>
 8000cd0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000cd2:	fb02 f303 	mul.w	r3, r2, r3
 8000cd6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cd8:	e021      	b.n	8000d1e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d01a      	beq.n	8000d18 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d007      	beq.n	8000cf8 <HAL_ADC_PollForConversion+0x168>
 8000ce8:	f7ff fd9e 	bl	8000828 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d20f      	bcs.n	8000d18 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d90b      	bls.n	8000d18 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	f043 0204 	orr.w	r2, r3, #4
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e030      	b.n	8000d7a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d8d9      	bhi.n	8000cda <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f06f 0212 	mvn.w	r2, #18
 8000d2e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d4a:	d115      	bne.n	8000d78 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d111      	bne.n	8000d78 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d105      	bne.n	8000d78 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	f043 0201 	orr.w	r2, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	371c      	adds	r7, #28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd90      	pop	{r4, r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000000 	.word	0x20000000
 8000d88:	24924924 	.word	0x24924924
 8000d8c:	00924924 	.word	0x00924924
 8000d90:	12492492 	.word	0x12492492
 8000d94:	00492492 	.word	0x00492492
 8000d98:	00249249 	.word	0x00249249

08000d9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d101      	bne.n	8000dd4 <HAL_ADC_ConfigChannel+0x20>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e0dc      	b.n	8000f8e <HAL_ADC_ConfigChannel+0x1da>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b06      	cmp	r3, #6
 8000de2:	d81c      	bhi.n	8000e1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	3b05      	subs	r3, #5
 8000df6:	221f      	movs	r2, #31
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	4019      	ands	r1, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3b05      	subs	r3, #5
 8000e10:	fa00 f203 	lsl.w	r2, r0, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1c:	e03c      	b.n	8000e98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b0c      	cmp	r3, #12
 8000e24:	d81c      	bhi.n	8000e60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	3b23      	subs	r3, #35	; 0x23
 8000e38:	221f      	movs	r2, #31
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	4019      	ands	r1, r3
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	3b23      	subs	r3, #35	; 0x23
 8000e52:	fa00 f203 	lsl.w	r2, r0, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5e:	e01b      	b.n	8000e98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	3b41      	subs	r3, #65	; 0x41
 8000e72:	221f      	movs	r2, #31
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4019      	ands	r1, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	3b41      	subs	r3, #65	; 0x41
 8000e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b09      	cmp	r3, #9
 8000e9e:	d91c      	bls.n	8000eda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68d9      	ldr	r1, [r3, #12]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	3b1e      	subs	r3, #30
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4019      	ands	r1, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	6898      	ldr	r0, [r3, #8]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	3b1e      	subs	r3, #30
 8000ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	e019      	b.n	8000f0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6919      	ldr	r1, [r3, #16]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	2207      	movs	r2, #7
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	4019      	ands	r1, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	6898      	ldr	r0, [r3, #8]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	fa00 f203 	lsl.w	r2, r0, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b10      	cmp	r3, #16
 8000f14:	d003      	beq.n	8000f1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f1a:	2b11      	cmp	r3, #17
 8000f1c:	d132      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d125      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d126      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b10      	cmp	r3, #16
 8000f4c:	d11a      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_ADC_ConfigChannel+0x1e8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f54:	fba2 2303 	umull	r2, r3, r2, r3
 8000f58:	0c9a      	lsrs	r2, r3, #18
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f64:	e002      	b.n	8000f6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f9      	bne.n	8000f66 <HAL_ADC_ConfigChannel+0x1b2>
 8000f72:	e007      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	f043 0220 	orr.w	r2, r3, #32
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	431bde83 	.word	0x431bde83

08000fa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d040      	beq.n	8001044 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0201 	orr.w	r2, r2, #1
 8000fd0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <ADC_Enable+0xac>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <ADC_Enable+0xb0>)
 8000fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fdc:	0c9b      	lsrs	r3, r3, #18
 8000fde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fe0:	e002      	b.n	8000fe8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f9      	bne.n	8000fe2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fee:	f7ff fc1b 	bl	8000828 <HAL_GetTick>
 8000ff2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ff4:	e01f      	b.n	8001036 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ff6:	f7ff fc17 	bl	8000828 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d918      	bls.n	8001036 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b01      	cmp	r3, #1
 8001010:	d011      	beq.n	8001036 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	f043 0210 	orr.w	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e007      	b.n	8001046 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b01      	cmp	r3, #1
 8001042:	d1d8      	bne.n	8000ff6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000000 	.word	0x20000000
 8001054:	431bde83 	.word	0x431bde83

08001058 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b01      	cmp	r3, #1
 8001070:	d12e      	bne.n	80010d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0201 	bic.w	r2, r2, #1
 8001080:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001082:	f7ff fbd1 	bl	8000828 <HAL_GetTick>
 8001086:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001088:	e01b      	b.n	80010c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800108a:	f7ff fbcd 	bl	8000828 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d914      	bls.n	80010c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d10d      	bne.n	80010c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	f043 0210 	orr.w	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e007      	b.n	80010d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d0dc      	beq.n	800108a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4906      	ldr	r1, [pc, #24]	; (8001174 <__NVIC_EnableIRQ+0x34>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff90 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff2d 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff42 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff90 	bl	80011cc <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5f 	bl	8001178 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff35 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa2 	bl	8001230 <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b08b      	sub	sp, #44	; 0x2c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	e169      	b.n	80015e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800130c:	2201      	movs	r2, #1
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	429a      	cmp	r2, r3
 8001326:	f040 8158 	bne.w	80015da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a9a      	ldr	r2, [pc, #616]	; (8001598 <HAL_GPIO_Init+0x2a0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d05e      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001334:	4a98      	ldr	r2, [pc, #608]	; (8001598 <HAL_GPIO_Init+0x2a0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d875      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 800133a:	4a98      	ldr	r2, [pc, #608]	; (800159c <HAL_GPIO_Init+0x2a4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d058      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001340:	4a96      	ldr	r2, [pc, #600]	; (800159c <HAL_GPIO_Init+0x2a4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d86f      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 8001346:	4a96      	ldr	r2, [pc, #600]	; (80015a0 <HAL_GPIO_Init+0x2a8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d052      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 800134c:	4a94      	ldr	r2, [pc, #592]	; (80015a0 <HAL_GPIO_Init+0x2a8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d869      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 8001352:	4a94      	ldr	r2, [pc, #592]	; (80015a4 <HAL_GPIO_Init+0x2ac>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d04c      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001358:	4a92      	ldr	r2, [pc, #584]	; (80015a4 <HAL_GPIO_Init+0x2ac>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d863      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 800135e:	4a92      	ldr	r2, [pc, #584]	; (80015a8 <HAL_GPIO_Init+0x2b0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d046      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001364:	4a90      	ldr	r2, [pc, #576]	; (80015a8 <HAL_GPIO_Init+0x2b0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d85d      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 800136a:	2b12      	cmp	r3, #18
 800136c:	d82a      	bhi.n	80013c4 <HAL_GPIO_Init+0xcc>
 800136e:	2b12      	cmp	r3, #18
 8001370:	d859      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <HAL_GPIO_Init+0x80>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	080013f3 	.word	0x080013f3
 800137c:	080013cd 	.word	0x080013cd
 8001380:	080013df 	.word	0x080013df
 8001384:	08001421 	.word	0x08001421
 8001388:	08001427 	.word	0x08001427
 800138c:	08001427 	.word	0x08001427
 8001390:	08001427 	.word	0x08001427
 8001394:	08001427 	.word	0x08001427
 8001398:	08001427 	.word	0x08001427
 800139c:	08001427 	.word	0x08001427
 80013a0:	08001427 	.word	0x08001427
 80013a4:	08001427 	.word	0x08001427
 80013a8:	08001427 	.word	0x08001427
 80013ac:	08001427 	.word	0x08001427
 80013b0:	08001427 	.word	0x08001427
 80013b4:	08001427 	.word	0x08001427
 80013b8:	08001427 	.word	0x08001427
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	080013e9 	.word	0x080013e9
 80013c4:	4a79      	ldr	r2, [pc, #484]	; (80015ac <HAL_GPIO_Init+0x2b4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ca:	e02c      	b.n	8001426 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	623b      	str	r3, [r7, #32]
          break;
 80013d2:	e029      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	3304      	adds	r3, #4
 80013da:	623b      	str	r3, [r7, #32]
          break;
 80013dc:	e024      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	3308      	adds	r3, #8
 80013e4:	623b      	str	r3, [r7, #32]
          break;
 80013e6:	e01f      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	330c      	adds	r3, #12
 80013ee:	623b      	str	r3, [r7, #32]
          break;
 80013f0:	e01a      	b.n	8001428 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013fa:	2304      	movs	r3, #4
 80013fc:	623b      	str	r3, [r7, #32]
          break;
 80013fe:	e013      	b.n	8001428 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d105      	bne.n	8001414 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001408:	2308      	movs	r3, #8
 800140a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	611a      	str	r2, [r3, #16]
          break;
 8001412:	e009      	b.n	8001428 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001414:	2308      	movs	r3, #8
 8001416:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	615a      	str	r2, [r3, #20]
          break;
 800141e:	e003      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
          break;
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x130>
          break;
 8001426:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2bff      	cmp	r3, #255	; 0xff
 800142c:	d801      	bhi.n	8001432 <HAL_GPIO_Init+0x13a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	e001      	b.n	8001436 <HAL_GPIO_Init+0x13e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3304      	adds	r3, #4
 8001436:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2bff      	cmp	r3, #255	; 0xff
 800143c:	d802      	bhi.n	8001444 <HAL_GPIO_Init+0x14c>
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	e002      	b.n	800144a <HAL_GPIO_Init+0x152>
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	3b08      	subs	r3, #8
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	210f      	movs	r1, #15
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	401a      	ands	r2, r3
 800145c:	6a39      	ldr	r1, [r7, #32]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	431a      	orrs	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80b1 	beq.w	80015da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001478:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <HAL_GPIO_Init+0x2b8>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a4c      	ldr	r2, [pc, #304]	; (80015b0 <HAL_GPIO_Init+0x2b8>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b4a      	ldr	r3, [pc, #296]	; (80015b0 <HAL_GPIO_Init+0x2b8>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001490:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <HAL_GPIO_Init+0x2bc>)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a40      	ldr	r2, [pc, #256]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d013      	beq.n	80014e4 <HAL_GPIO_Init+0x1ec>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a3f      	ldr	r2, [pc, #252]	; (80015bc <HAL_GPIO_Init+0x2c4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d00d      	beq.n	80014e0 <HAL_GPIO_Init+0x1e8>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a3e      	ldr	r2, [pc, #248]	; (80015c0 <HAL_GPIO_Init+0x2c8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d007      	beq.n	80014dc <HAL_GPIO_Init+0x1e4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a3d      	ldr	r2, [pc, #244]	; (80015c4 <HAL_GPIO_Init+0x2cc>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d101      	bne.n	80014d8 <HAL_GPIO_Init+0x1e0>
 80014d4:	2303      	movs	r3, #3
 80014d6:	e006      	b.n	80014e6 <HAL_GPIO_Init+0x1ee>
 80014d8:	2304      	movs	r3, #4
 80014da:	e004      	b.n	80014e6 <HAL_GPIO_Init+0x1ee>
 80014dc:	2302      	movs	r3, #2
 80014de:	e002      	b.n	80014e6 <HAL_GPIO_Init+0x1ee>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <HAL_GPIO_Init+0x1ee>
 80014e4:	2300      	movs	r3, #0
 80014e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e8:	f002 0203 	and.w	r2, r2, #3
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	4093      	lsls	r3, r2
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014f6:	492f      	ldr	r1, [pc, #188]	; (80015b4 <HAL_GPIO_Init+0x2bc>)
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	492c      	ldr	r1, [pc, #176]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	43db      	mvns	r3, r3
 8001526:	4928      	ldr	r1, [pc, #160]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001528:	4013      	ands	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4922      	ldr	r1, [pc, #136]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	491e      	ldr	r1, [pc, #120]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001550:	4013      	ands	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	4918      	ldr	r1, [pc, #96]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	4914      	ldr	r1, [pc, #80]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 8001578:	4013      	ands	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d021      	beq.n	80015cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	490e      	ldr	r1, [pc, #56]	; (80015c8 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
 8001594:	e021      	b.n	80015da <HAL_GPIO_Init+0x2e2>
 8001596:	bf00      	nop
 8001598:	10320000 	.word	0x10320000
 800159c:	10310000 	.word	0x10310000
 80015a0:	10220000 	.word	0x10220000
 80015a4:	10210000 	.word	0x10210000
 80015a8:	10120000 	.word	0x10120000
 80015ac:	10110000 	.word	0x10110000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000
 80015b8:	40010800 	.word	0x40010800
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40011400 	.word	0x40011400
 80015c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_GPIO_Init+0x304>)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	4909      	ldr	r1, [pc, #36]	; (80015fc <HAL_GPIO_Init+0x304>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	3301      	adds	r3, #1
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f47f ae8e 	bne.w	800130c <HAL_GPIO_Init+0x14>
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	372c      	adds	r7, #44	; 0x2c
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40010400 	.word	0x40010400

08001600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800161c:	e003      	b.n	8001626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	041a      	lsls	r2, r3, #16
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	611a      	str	r2, [r3, #16]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f806 	bl	8001660 <HAL_GPIO_EXTI_Callback>
  }
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40010400 	.word	0x40010400

08001660 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e272      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8087 	beq.w	80017a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001694:	4b92      	ldr	r3, [pc, #584]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b04      	cmp	r3, #4
 800169e:	d00c      	beq.n	80016ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a0:	4b8f      	ldr	r3, [pc, #572]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d112      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
 80016ac:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b8:	d10b      	bne.n	80016d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ba:	4b89      	ldr	r3, [pc, #548]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d06c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x12c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d168      	bne.n	80017a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e24c      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x76>
 80016dc:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a7f      	ldr	r2, [pc, #508]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e02e      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x98>
 80016f2:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7a      	ldr	r2, [pc, #488]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b78      	ldr	r3, [pc, #480]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a77      	ldr	r2, [pc, #476]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e01d      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0xbc>
 8001716:	4b72      	ldr	r3, [pc, #456]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a71      	ldr	r2, [pc, #452]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b6f      	ldr	r3, [pc, #444]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0xd4>
 8001730:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6a      	ldr	r2, [pc, #424]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a67      	ldr	r2, [pc, #412]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001746:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff f86a 	bl	8000828 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff f866 	bl	8000828 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e200      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b5d      	ldr	r3, [pc, #372]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0xe4>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff f856 	bl	8000828 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff f852 	bl	8000828 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1ec      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x10c>
 800179e:	e000      	b.n	80017a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d063      	beq.n	8001876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ae:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d11c      	bne.n	8001800 <HAL_RCC_OscConfig+0x18c>
 80017c6:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x176>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1c0      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4939      	ldr	r1, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	e03a      	b.n	8001876 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff f80b 	bl	8000828 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff f807 	bl	8000828 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e1a1      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4927      	ldr	r1, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7fe ffea 	bl	8000828 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001858:	f7fe ffe6 	bl	8000828 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e180      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d03a      	beq.n	80018f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d019      	beq.n	80018be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7fe ffca 	bl	8000828 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7fe ffc6 	bl	8000828 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e160      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f000 fad8 	bl	8001e6c <RCC_Delay>
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7fe ffb0 	bl	8000828 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ca:	e00f      	b.n	80018ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7fe ffac 	bl	8000828 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d908      	bls.n	80018ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e146      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	42420000 	.word	0x42420000
 80018e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	4b92      	ldr	r3, [pc, #584]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e9      	bne.n	80018cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a6 	beq.w	8001a52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10d      	bne.n	8001932 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a87      	ldr	r2, [pc, #540]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b85      	ldr	r3, [pc, #532]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192e:	2301      	movs	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001932:	4b82      	ldr	r3, [pc, #520]	; (8001b3c <HAL_RCC_OscConfig+0x4c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193e:	4b7f      	ldr	r3, [pc, #508]	; (8001b3c <HAL_RCC_OscConfig+0x4c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a7e      	ldr	r2, [pc, #504]	; (8001b3c <HAL_RCC_OscConfig+0x4c8>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194a:	f7fe ff6d 	bl	8000828 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001952:	f7fe ff69 	bl	8000828 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	; 0x64
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e103      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	4b75      	ldr	r3, [pc, #468]	; (8001b3c <HAL_RCC_OscConfig+0x4c8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x312>
 8001978:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4a6e      	ldr	r2, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6213      	str	r3, [r2, #32]
 8001984:	e02d      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x334>
 800198e:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a69      	ldr	r2, [pc, #420]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6213      	str	r3, [r2, #32]
 800199a:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a66      	ldr	r2, [pc, #408]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	e01c      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_OscConfig+0x356>
 80019b0:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a60      	ldr	r2, [pc, #384]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a5d      	ldr	r2, [pc, #372]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0x36e>
 80019ca:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4a5a      	ldr	r2, [pc, #360]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6213      	str	r3, [r2, #32]
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	4a57      	ldr	r2, [pc, #348]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d015      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7fe ff1d 	bl	8000828 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7fe ff19 	bl	8000828 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0b1      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ee      	beq.n	80019f2 <HAL_RCC_OscConfig+0x37e>
 8001a14:	e014      	b.n	8001a40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7fe ff07 	bl	8000828 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7fe ff03 	bl	8000828 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e09b      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ee      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a3b      	ldr	r2, [pc, #236]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8087 	beq.w	8001b6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d061      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d146      	bne.n	8001afe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <HAL_RCC_OscConfig+0x4cc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7fe fed7 	bl	8000828 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7fe fed3 	bl	8000828 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e06d      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	4921      	ldr	r1, [pc, #132]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a19      	ldr	r1, [r3, #32]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	491b      	ldr	r1, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_RCC_OscConfig+0x4cc>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7fe fea7 	bl	8000828 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ade:	f7fe fea3 	bl	8000828 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e03d      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x46a>
 8001afc:	e035      	b.n	8001b6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_RCC_OscConfig+0x4cc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7fe fe90 	bl	8000828 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7fe fe8c 	bl	8000828 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e026      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x498>
 8001b2a:	e01e      	b.n	8001b6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e019      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_OscConfig+0x500>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000

08001b78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0d0      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d910      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b67      	ldr	r3, [pc, #412]	; (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	4965      	ldr	r1, [pc, #404]	; (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b8      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	494d      	ldr	r1, [pc, #308]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d040      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d115      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e07f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e073      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e06b      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f023 0203 	bic.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4936      	ldr	r1, [pc, #216]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c68:	f7fe fdde 	bl	8000828 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f7fe fdda 	bl	8000828 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e053      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 020c 	and.w	r2, r3, #12
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1eb      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d210      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 0207 	bic.w	r2, r3, #7
 8001cae:	4922      	ldr	r1, [pc, #136]	; (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e032      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4916      	ldr	r1, [pc, #88]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d06:	f000 f821 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	490a      	ldr	r1, [pc, #40]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	5ccb      	ldrb	r3, [r1, r3]
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1cc>)
 8001d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x1d0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fd3c 	bl	80007a4 <HAL_InitTick>

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	080034dc 	.word	0x080034dc
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	b490      	push	{r4, r7}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d52:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d54:	1d3c      	adds	r4, r7, #4
 8001d56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d5c:	f240 2301 	movw	r3, #513	; 0x201
 8001d60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d002      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x40>
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d003      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x46>
 8001d8a:	e02b      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d8e:	623b      	str	r3, [r7, #32]
      break;
 8001d90:	e02b      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	0c9b      	lsrs	r3, r3, #18
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3328      	adds	r3, #40	; 0x28
 8001d9c:	443b      	add	r3, r7
 8001d9e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001da2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d012      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	0c5b      	lsrs	r3, r3, #17
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	3328      	adds	r3, #40	; 0x28
 8001dba:	443b      	add	r3, r7
 8001dbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dc6:	fb03 f202 	mul.w	r2, r3, r2
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd2:	e004      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	623b      	str	r3, [r7, #32]
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001de6:	623b      	str	r3, [r7, #32]
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	6a3b      	ldr	r3, [r7, #32]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc90      	pop	{r4, r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	080034bc 	.word	0x080034bc
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	003d0900 	.word	0x003d0900

08001e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	20000000 	.word	0x20000000

08001e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e20:	f7ff fff2 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	080034ec 	.word	0x080034ec

08001e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e48:	f7ff ffde 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	0adb      	lsrs	r3, r3, #11
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	080034ec 	.word	0x080034ec

08001e6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <RCC_Delay+0x34>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <RCC_Delay+0x38>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0a5b      	lsrs	r3, r3, #9
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e88:	bf00      	nop
  }
  while (Delay --);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	60fa      	str	r2, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f9      	bne.n	8001e88 <RCC_Delay+0x1c>
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	10624dd3 	.word	0x10624dd3

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d07d      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	4a4b      	ldr	r2, [pc, #300]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ede:	61d3      	str	r3, [r2, #28]
 8001ee0:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	4b46      	ldr	r3, [pc, #280]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d118      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efc:	4b43      	ldr	r3, [pc, #268]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a42      	ldr	r2, [pc, #264]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f08:	f7fe fc8e 	bl	8000828 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0e:	e008      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7fe fc8a 	bl	8000828 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e06d      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f2e:	4b36      	ldr	r3, [pc, #216]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d02e      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d027      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f56:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f62:	4a29      	ldr	r2, [pc, #164]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d014      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7fe fc59 	bl	8000828 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7fe fc55 	bl	8000828 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e036      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ee      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4917      	ldr	r1, [pc, #92]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	490b      	ldr	r1, [pc, #44]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
 8002010:	42420440 	.word	0x42420440

08002014 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b08d      	sub	sp, #52	; 0x34
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800201c:	4b58      	ldr	r3, [pc, #352]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800201e:	f107 040c 	add.w	r4, r7, #12
 8002022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002028:	f240 2301 	movw	r3, #513	; 0x201
 800202c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b10      	cmp	r3, #16
 800204c:	f200 808e 	bhi.w	800216c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d049      	beq.n	80020ea <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d079      	beq.n	8002150 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800205c:	e086      	b.n	800216c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800205e:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002064:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d07f      	beq.n	8002170 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	0c9b      	lsrs	r3, r3, #18
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	3330      	adds	r3, #48	; 0x30
 800207a:	443b      	add	r3, r7
 800207c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002080:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d017      	beq.n	80020bc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	0c5b      	lsrs	r3, r3, #17
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	3330      	adds	r3, #48	; 0x30
 8002098:	443b      	add	r3, r7
 800209a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80020aa:	4a37      	ldr	r2, [pc, #220]	; (8002188 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ba:	e004      	b.n	80020c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	4a33      	ldr	r2, [pc, #204]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80020c6:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d2:	d102      	bne.n	80020da <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020d8:	e04a      	b.n	8002170 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020e8:	e042      	b.n	8002170 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020fa:	d108      	bne.n	800210e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
 800210c:	e01f      	b.n	800214e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002118:	d109      	bne.n	800212e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002126:	f649 4340 	movw	r3, #40000	; 0x9c40
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
 800212c:	e00f      	b.n	800214e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002138:	d11c      	bne.n	8002174 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002146:	f24f 4324 	movw	r3, #62500	; 0xf424
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800214c:	e012      	b.n	8002174 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800214e:	e011      	b.n	8002174 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002150:	f7ff fe78 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	0b9b      	lsrs	r3, r3, #14
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	3301      	adds	r3, #1
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800216a:	e004      	b.n	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800216c:	bf00      	nop
 800216e:	e002      	b.n	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002174:	bf00      	nop
    }
  }
  return (frequency);
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002178:	4618      	mov	r0, r3
 800217a:	3734      	adds	r7, #52	; 0x34
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}
 8002180:	080034cc 	.word	0x080034cc
 8002184:	40021000 	.word	0x40021000
 8002188:	007a1200 	.word	0x007a1200
 800218c:	003d0900 	.word	0x003d0900
 8002190:	aaaaaaab 	.word	0xaaaaaaab

08002194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e03f      	b.n	8002226 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe f9a4 	bl	8000508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2224      	movs	r2, #36	; 0x24
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f905 	bl	80023e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800220c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b08a      	sub	sp, #40	; 0x28
 8002232:	af02      	add	r7, sp, #8
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	4613      	mov	r3, r2
 800223c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b20      	cmp	r3, #32
 800224c:	d17c      	bne.n	8002348 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_UART_Transmit+0x2c>
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e075      	b.n	800234a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_UART_Transmit+0x3e>
 8002268:	2302      	movs	r3, #2
 800226a:	e06e      	b.n	800234a <HAL_UART_Transmit+0x11c>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2221      	movs	r2, #33	; 0x21
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002282:	f7fe fad1 	bl	8000828 <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	88fa      	ldrh	r2, [r7, #6]
 800228c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	88fa      	ldrh	r2, [r7, #6]
 8002292:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800229c:	d108      	bne.n	80022b0 <HAL_UART_Transmit+0x82>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d104      	bne.n	80022b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	e003      	b.n	80022b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022c0:	e02a      	b.n	8002318 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2200      	movs	r2, #0
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f840 	bl	8002352 <UART_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e036      	b.n	800234a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10b      	bne.n	80022fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	3302      	adds	r3, #2
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	e007      	b.n	800230a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	3301      	adds	r3, #1
 8002308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1cf      	bne.n	80022c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2200      	movs	r2, #0
 800232a:	2140      	movs	r1, #64	; 0x40
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f810 	bl	8002352 <UART_WaitOnFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e006      	b.n	800234a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002362:	e02c      	b.n	80023be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236a:	d028      	beq.n	80023be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <UART_WaitOnFlagUntilTimeout+0x30>
 8002372:	f7fe fa59 	bl	8000828 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	429a      	cmp	r2, r3
 8002380:	d21d      	bcs.n	80023be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002390:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e00f      	b.n	80023de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4013      	ands	r3, r2
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	bf0c      	ite	eq
 80023ce:	2301      	moveq	r3, #1
 80023d0:	2300      	movne	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d0c3      	beq.n	8002364 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002422:	f023 030c 	bic.w	r3, r3, #12
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	430b      	orrs	r3, r1
 800242e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2c      	ldr	r2, [pc, #176]	; (80024fc <UART_SetConfig+0x114>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d103      	bne.n	8002458 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002450:	f7ff fcf8 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	e002      	b.n	800245e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002458:	f7ff fce0 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 800245c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	009a      	lsls	r2, r3, #2
 8002468:	441a      	add	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	4a22      	ldr	r2, [pc, #136]	; (8002500 <UART_SetConfig+0x118>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	0119      	lsls	r1, r3, #4
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009a      	lsls	r2, r3, #2
 8002488:	441a      	add	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fbb2 f2f3 	udiv	r2, r2, r3
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <UART_SetConfig+0x118>)
 8002496:	fba3 0302 	umull	r0, r3, r3, r2
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2064      	movs	r0, #100	; 0x64
 800249e:	fb00 f303 	mul.w	r3, r0, r3
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	3332      	adds	r3, #50	; 0x32
 80024a8:	4a15      	ldr	r2, [pc, #84]	; (8002500 <UART_SetConfig+0x118>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b4:	4419      	add	r1, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009a      	lsls	r2, r3, #2
 80024c0:	441a      	add	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <UART_SetConfig+0x118>)
 80024ce:	fba3 0302 	umull	r0, r3, r3, r2
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2064      	movs	r0, #100	; 0x64
 80024d6:	fb00 f303 	mul.w	r3, r0, r3
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	3332      	adds	r3, #50	; 0x32
 80024e0:	4a07      	ldr	r2, [pc, #28]	; (8002500 <UART_SetConfig+0x118>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	f003 020f 	and.w	r2, r3, #15
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	440a      	add	r2, r1
 80024f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40013800 	.word	0x40013800
 8002500:	51eb851f 	.word	0x51eb851f

08002504 <__errno>:
 8002504:	4b01      	ldr	r3, [pc, #4]	; (800250c <__errno+0x8>)
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	2000000c 	.word	0x2000000c

08002510 <__libc_init_array>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	2600      	movs	r6, #0
 8002514:	4d0c      	ldr	r5, [pc, #48]	; (8002548 <__libc_init_array+0x38>)
 8002516:	4c0d      	ldr	r4, [pc, #52]	; (800254c <__libc_init_array+0x3c>)
 8002518:	1b64      	subs	r4, r4, r5
 800251a:	10a4      	asrs	r4, r4, #2
 800251c:	42a6      	cmp	r6, r4
 800251e:	d109      	bne.n	8002534 <__libc_init_array+0x24>
 8002520:	f000 ffb6 	bl	8003490 <_init>
 8002524:	2600      	movs	r6, #0
 8002526:	4d0a      	ldr	r5, [pc, #40]	; (8002550 <__libc_init_array+0x40>)
 8002528:	4c0a      	ldr	r4, [pc, #40]	; (8002554 <__libc_init_array+0x44>)
 800252a:	1b64      	subs	r4, r4, r5
 800252c:	10a4      	asrs	r4, r4, #2
 800252e:	42a6      	cmp	r6, r4
 8002530:	d105      	bne.n	800253e <__libc_init_array+0x2e>
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	f855 3b04 	ldr.w	r3, [r5], #4
 8002538:	4798      	blx	r3
 800253a:	3601      	adds	r6, #1
 800253c:	e7ee      	b.n	800251c <__libc_init_array+0xc>
 800253e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002542:	4798      	blx	r3
 8002544:	3601      	adds	r6, #1
 8002546:	e7f2      	b.n	800252e <__libc_init_array+0x1e>
 8002548:	0800358c 	.word	0x0800358c
 800254c:	0800358c 	.word	0x0800358c
 8002550:	0800358c 	.word	0x0800358c
 8002554:	08003590 	.word	0x08003590

08002558 <memset>:
 8002558:	4603      	mov	r3, r0
 800255a:	4402      	add	r2, r0
 800255c:	4293      	cmp	r3, r2
 800255e:	d100      	bne.n	8002562 <memset+0xa>
 8002560:	4770      	bx	lr
 8002562:	f803 1b01 	strb.w	r1, [r3], #1
 8002566:	e7f9      	b.n	800255c <memset+0x4>

08002568 <iprintf>:
 8002568:	b40f      	push	{r0, r1, r2, r3}
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <iprintf+0x2c>)
 800256c:	b513      	push	{r0, r1, r4, lr}
 800256e:	681c      	ldr	r4, [r3, #0]
 8002570:	b124      	cbz	r4, 800257c <iprintf+0x14>
 8002572:	69a3      	ldr	r3, [r4, #24]
 8002574:	b913      	cbnz	r3, 800257c <iprintf+0x14>
 8002576:	4620      	mov	r0, r4
 8002578:	f000 f866 	bl	8002648 <__sinit>
 800257c:	ab05      	add	r3, sp, #20
 800257e:	4620      	mov	r0, r4
 8002580:	9a04      	ldr	r2, [sp, #16]
 8002582:	68a1      	ldr	r1, [r4, #8]
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	f000 f9bb 	bl	8002900 <_vfiprintf_r>
 800258a:	b002      	add	sp, #8
 800258c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002590:	b004      	add	sp, #16
 8002592:	4770      	bx	lr
 8002594:	2000000c 	.word	0x2000000c

08002598 <std>:
 8002598:	2300      	movs	r3, #0
 800259a:	b510      	push	{r4, lr}
 800259c:	4604      	mov	r4, r0
 800259e:	e9c0 3300 	strd	r3, r3, [r0]
 80025a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025a6:	6083      	str	r3, [r0, #8]
 80025a8:	8181      	strh	r1, [r0, #12]
 80025aa:	6643      	str	r3, [r0, #100]	; 0x64
 80025ac:	81c2      	strh	r2, [r0, #14]
 80025ae:	6183      	str	r3, [r0, #24]
 80025b0:	4619      	mov	r1, r3
 80025b2:	2208      	movs	r2, #8
 80025b4:	305c      	adds	r0, #92	; 0x5c
 80025b6:	f7ff ffcf 	bl	8002558 <memset>
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <std+0x38>)
 80025bc:	6224      	str	r4, [r4, #32]
 80025be:	6263      	str	r3, [r4, #36]	; 0x24
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <std+0x3c>)
 80025c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <std+0x40>)
 80025c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <std+0x44>)
 80025ca:	6323      	str	r3, [r4, #48]	; 0x30
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	bf00      	nop
 80025d0:	08002ead 	.word	0x08002ead
 80025d4:	08002ecf 	.word	0x08002ecf
 80025d8:	08002f07 	.word	0x08002f07
 80025dc:	08002f2b 	.word	0x08002f2b

080025e0 <_cleanup_r>:
 80025e0:	4901      	ldr	r1, [pc, #4]	; (80025e8 <_cleanup_r+0x8>)
 80025e2:	f000 b8af 	b.w	8002744 <_fwalk_reent>
 80025e6:	bf00      	nop
 80025e8:	080031fd 	.word	0x080031fd

080025ec <__sfmoreglue>:
 80025ec:	2268      	movs	r2, #104	; 0x68
 80025ee:	b570      	push	{r4, r5, r6, lr}
 80025f0:	1e4d      	subs	r5, r1, #1
 80025f2:	4355      	muls	r5, r2
 80025f4:	460e      	mov	r6, r1
 80025f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025fa:	f000 f8e5 	bl	80027c8 <_malloc_r>
 80025fe:	4604      	mov	r4, r0
 8002600:	b140      	cbz	r0, 8002614 <__sfmoreglue+0x28>
 8002602:	2100      	movs	r1, #0
 8002604:	e9c0 1600 	strd	r1, r6, [r0]
 8002608:	300c      	adds	r0, #12
 800260a:	60a0      	str	r0, [r4, #8]
 800260c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002610:	f7ff ffa2 	bl	8002558 <memset>
 8002614:	4620      	mov	r0, r4
 8002616:	bd70      	pop	{r4, r5, r6, pc}

08002618 <__sfp_lock_acquire>:
 8002618:	4801      	ldr	r0, [pc, #4]	; (8002620 <__sfp_lock_acquire+0x8>)
 800261a:	f000 b8b3 	b.w	8002784 <__retarget_lock_acquire_recursive>
 800261e:	bf00      	nop
 8002620:	2000010d 	.word	0x2000010d

08002624 <__sfp_lock_release>:
 8002624:	4801      	ldr	r0, [pc, #4]	; (800262c <__sfp_lock_release+0x8>)
 8002626:	f000 b8ae 	b.w	8002786 <__retarget_lock_release_recursive>
 800262a:	bf00      	nop
 800262c:	2000010d 	.word	0x2000010d

08002630 <__sinit_lock_acquire>:
 8002630:	4801      	ldr	r0, [pc, #4]	; (8002638 <__sinit_lock_acquire+0x8>)
 8002632:	f000 b8a7 	b.w	8002784 <__retarget_lock_acquire_recursive>
 8002636:	bf00      	nop
 8002638:	2000010e 	.word	0x2000010e

0800263c <__sinit_lock_release>:
 800263c:	4801      	ldr	r0, [pc, #4]	; (8002644 <__sinit_lock_release+0x8>)
 800263e:	f000 b8a2 	b.w	8002786 <__retarget_lock_release_recursive>
 8002642:	bf00      	nop
 8002644:	2000010e 	.word	0x2000010e

08002648 <__sinit>:
 8002648:	b510      	push	{r4, lr}
 800264a:	4604      	mov	r4, r0
 800264c:	f7ff fff0 	bl	8002630 <__sinit_lock_acquire>
 8002650:	69a3      	ldr	r3, [r4, #24]
 8002652:	b11b      	cbz	r3, 800265c <__sinit+0x14>
 8002654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002658:	f7ff bff0 	b.w	800263c <__sinit_lock_release>
 800265c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002660:	6523      	str	r3, [r4, #80]	; 0x50
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <__sinit+0x68>)
 8002664:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <__sinit+0x6c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	62a2      	str	r2, [r4, #40]	; 0x28
 800266a:	42a3      	cmp	r3, r4
 800266c:	bf08      	it	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	4620      	mov	r0, r4
 8002672:	bf08      	it	eq
 8002674:	61a3      	streq	r3, [r4, #24]
 8002676:	f000 f81f 	bl	80026b8 <__sfp>
 800267a:	6060      	str	r0, [r4, #4]
 800267c:	4620      	mov	r0, r4
 800267e:	f000 f81b 	bl	80026b8 <__sfp>
 8002682:	60a0      	str	r0, [r4, #8]
 8002684:	4620      	mov	r0, r4
 8002686:	f000 f817 	bl	80026b8 <__sfp>
 800268a:	2200      	movs	r2, #0
 800268c:	2104      	movs	r1, #4
 800268e:	60e0      	str	r0, [r4, #12]
 8002690:	6860      	ldr	r0, [r4, #4]
 8002692:	f7ff ff81 	bl	8002598 <std>
 8002696:	2201      	movs	r2, #1
 8002698:	2109      	movs	r1, #9
 800269a:	68a0      	ldr	r0, [r4, #8]
 800269c:	f7ff ff7c 	bl	8002598 <std>
 80026a0:	2202      	movs	r2, #2
 80026a2:	2112      	movs	r1, #18
 80026a4:	68e0      	ldr	r0, [r4, #12]
 80026a6:	f7ff ff77 	bl	8002598 <std>
 80026aa:	2301      	movs	r3, #1
 80026ac:	61a3      	str	r3, [r4, #24]
 80026ae:	e7d1      	b.n	8002654 <__sinit+0xc>
 80026b0:	080034f4 	.word	0x080034f4
 80026b4:	080025e1 	.word	0x080025e1

080026b8 <__sfp>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	4607      	mov	r7, r0
 80026bc:	f7ff ffac 	bl	8002618 <__sfp_lock_acquire>
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <__sfp+0x84>)
 80026c2:	681e      	ldr	r6, [r3, #0]
 80026c4:	69b3      	ldr	r3, [r6, #24]
 80026c6:	b913      	cbnz	r3, 80026ce <__sfp+0x16>
 80026c8:	4630      	mov	r0, r6
 80026ca:	f7ff ffbd 	bl	8002648 <__sinit>
 80026ce:	3648      	adds	r6, #72	; 0x48
 80026d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	d503      	bpl.n	80026e0 <__sfp+0x28>
 80026d8:	6833      	ldr	r3, [r6, #0]
 80026da:	b30b      	cbz	r3, 8002720 <__sfp+0x68>
 80026dc:	6836      	ldr	r6, [r6, #0]
 80026de:	e7f7      	b.n	80026d0 <__sfp+0x18>
 80026e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026e4:	b9d5      	cbnz	r5, 800271c <__sfp+0x64>
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <__sfp+0x88>)
 80026e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026ec:	60e3      	str	r3, [r4, #12]
 80026ee:	6665      	str	r5, [r4, #100]	; 0x64
 80026f0:	f000 f847 	bl	8002782 <__retarget_lock_init_recursive>
 80026f4:	f7ff ff96 	bl	8002624 <__sfp_lock_release>
 80026f8:	2208      	movs	r2, #8
 80026fa:	4629      	mov	r1, r5
 80026fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002700:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002704:	6025      	str	r5, [r4, #0]
 8002706:	61a5      	str	r5, [r4, #24]
 8002708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800270c:	f7ff ff24 	bl	8002558 <memset>
 8002710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002718:	4620      	mov	r0, r4
 800271a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800271c:	3468      	adds	r4, #104	; 0x68
 800271e:	e7d9      	b.n	80026d4 <__sfp+0x1c>
 8002720:	2104      	movs	r1, #4
 8002722:	4638      	mov	r0, r7
 8002724:	f7ff ff62 	bl	80025ec <__sfmoreglue>
 8002728:	4604      	mov	r4, r0
 800272a:	6030      	str	r0, [r6, #0]
 800272c:	2800      	cmp	r0, #0
 800272e:	d1d5      	bne.n	80026dc <__sfp+0x24>
 8002730:	f7ff ff78 	bl	8002624 <__sfp_lock_release>
 8002734:	230c      	movs	r3, #12
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	e7ee      	b.n	8002718 <__sfp+0x60>
 800273a:	bf00      	nop
 800273c:	080034f4 	.word	0x080034f4
 8002740:	ffff0001 	.word	0xffff0001

08002744 <_fwalk_reent>:
 8002744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002748:	4606      	mov	r6, r0
 800274a:	4688      	mov	r8, r1
 800274c:	2700      	movs	r7, #0
 800274e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002756:	f1b9 0901 	subs.w	r9, r9, #1
 800275a:	d505      	bpl.n	8002768 <_fwalk_reent+0x24>
 800275c:	6824      	ldr	r4, [r4, #0]
 800275e:	2c00      	cmp	r4, #0
 8002760:	d1f7      	bne.n	8002752 <_fwalk_reent+0xe>
 8002762:	4638      	mov	r0, r7
 8002764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002768:	89ab      	ldrh	r3, [r5, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d907      	bls.n	800277e <_fwalk_reent+0x3a>
 800276e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002772:	3301      	adds	r3, #1
 8002774:	d003      	beq.n	800277e <_fwalk_reent+0x3a>
 8002776:	4629      	mov	r1, r5
 8002778:	4630      	mov	r0, r6
 800277a:	47c0      	blx	r8
 800277c:	4307      	orrs	r7, r0
 800277e:	3568      	adds	r5, #104	; 0x68
 8002780:	e7e9      	b.n	8002756 <_fwalk_reent+0x12>

08002782 <__retarget_lock_init_recursive>:
 8002782:	4770      	bx	lr

08002784 <__retarget_lock_acquire_recursive>:
 8002784:	4770      	bx	lr

08002786 <__retarget_lock_release_recursive>:
 8002786:	4770      	bx	lr

08002788 <sbrk_aligned>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	4e0e      	ldr	r6, [pc, #56]	; (80027c4 <sbrk_aligned+0x3c>)
 800278c:	460c      	mov	r4, r1
 800278e:	6831      	ldr	r1, [r6, #0]
 8002790:	4605      	mov	r5, r0
 8002792:	b911      	cbnz	r1, 800279a <sbrk_aligned+0x12>
 8002794:	f000 fb7a 	bl	8002e8c <_sbrk_r>
 8002798:	6030      	str	r0, [r6, #0]
 800279a:	4621      	mov	r1, r4
 800279c:	4628      	mov	r0, r5
 800279e:	f000 fb75 	bl	8002e8c <_sbrk_r>
 80027a2:	1c43      	adds	r3, r0, #1
 80027a4:	d00a      	beq.n	80027bc <sbrk_aligned+0x34>
 80027a6:	1cc4      	adds	r4, r0, #3
 80027a8:	f024 0403 	bic.w	r4, r4, #3
 80027ac:	42a0      	cmp	r0, r4
 80027ae:	d007      	beq.n	80027c0 <sbrk_aligned+0x38>
 80027b0:	1a21      	subs	r1, r4, r0
 80027b2:	4628      	mov	r0, r5
 80027b4:	f000 fb6a 	bl	8002e8c <_sbrk_r>
 80027b8:	3001      	adds	r0, #1
 80027ba:	d101      	bne.n	80027c0 <sbrk_aligned+0x38>
 80027bc:	f04f 34ff 	mov.w	r4, #4294967295
 80027c0:	4620      	mov	r0, r4
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	20000114 	.word	0x20000114

080027c8 <_malloc_r>:
 80027c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027cc:	1ccd      	adds	r5, r1, #3
 80027ce:	f025 0503 	bic.w	r5, r5, #3
 80027d2:	3508      	adds	r5, #8
 80027d4:	2d0c      	cmp	r5, #12
 80027d6:	bf38      	it	cc
 80027d8:	250c      	movcc	r5, #12
 80027da:	2d00      	cmp	r5, #0
 80027dc:	4607      	mov	r7, r0
 80027de:	db01      	blt.n	80027e4 <_malloc_r+0x1c>
 80027e0:	42a9      	cmp	r1, r5
 80027e2:	d905      	bls.n	80027f0 <_malloc_r+0x28>
 80027e4:	230c      	movs	r3, #12
 80027e6:	2600      	movs	r6, #0
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	4630      	mov	r0, r6
 80027ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027f0:	4e2e      	ldr	r6, [pc, #184]	; (80028ac <_malloc_r+0xe4>)
 80027f2:	f000 fdc5 	bl	8003380 <__malloc_lock>
 80027f6:	6833      	ldr	r3, [r6, #0]
 80027f8:	461c      	mov	r4, r3
 80027fa:	bb34      	cbnz	r4, 800284a <_malloc_r+0x82>
 80027fc:	4629      	mov	r1, r5
 80027fe:	4638      	mov	r0, r7
 8002800:	f7ff ffc2 	bl	8002788 <sbrk_aligned>
 8002804:	1c43      	adds	r3, r0, #1
 8002806:	4604      	mov	r4, r0
 8002808:	d14d      	bne.n	80028a6 <_malloc_r+0xde>
 800280a:	6834      	ldr	r4, [r6, #0]
 800280c:	4626      	mov	r6, r4
 800280e:	2e00      	cmp	r6, #0
 8002810:	d140      	bne.n	8002894 <_malloc_r+0xcc>
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	4631      	mov	r1, r6
 8002816:	4638      	mov	r0, r7
 8002818:	eb04 0803 	add.w	r8, r4, r3
 800281c:	f000 fb36 	bl	8002e8c <_sbrk_r>
 8002820:	4580      	cmp	r8, r0
 8002822:	d13a      	bne.n	800289a <_malloc_r+0xd2>
 8002824:	6821      	ldr	r1, [r4, #0]
 8002826:	3503      	adds	r5, #3
 8002828:	1a6d      	subs	r5, r5, r1
 800282a:	f025 0503 	bic.w	r5, r5, #3
 800282e:	3508      	adds	r5, #8
 8002830:	2d0c      	cmp	r5, #12
 8002832:	bf38      	it	cc
 8002834:	250c      	movcc	r5, #12
 8002836:	4638      	mov	r0, r7
 8002838:	4629      	mov	r1, r5
 800283a:	f7ff ffa5 	bl	8002788 <sbrk_aligned>
 800283e:	3001      	adds	r0, #1
 8002840:	d02b      	beq.n	800289a <_malloc_r+0xd2>
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	442b      	add	r3, r5
 8002846:	6023      	str	r3, [r4, #0]
 8002848:	e00e      	b.n	8002868 <_malloc_r+0xa0>
 800284a:	6822      	ldr	r2, [r4, #0]
 800284c:	1b52      	subs	r2, r2, r5
 800284e:	d41e      	bmi.n	800288e <_malloc_r+0xc6>
 8002850:	2a0b      	cmp	r2, #11
 8002852:	d916      	bls.n	8002882 <_malloc_r+0xba>
 8002854:	1961      	adds	r1, r4, r5
 8002856:	42a3      	cmp	r3, r4
 8002858:	6025      	str	r5, [r4, #0]
 800285a:	bf18      	it	ne
 800285c:	6059      	strne	r1, [r3, #4]
 800285e:	6863      	ldr	r3, [r4, #4]
 8002860:	bf08      	it	eq
 8002862:	6031      	streq	r1, [r6, #0]
 8002864:	5162      	str	r2, [r4, r5]
 8002866:	604b      	str	r3, [r1, #4]
 8002868:	4638      	mov	r0, r7
 800286a:	f104 060b 	add.w	r6, r4, #11
 800286e:	f000 fd8d 	bl	800338c <__malloc_unlock>
 8002872:	f026 0607 	bic.w	r6, r6, #7
 8002876:	1d23      	adds	r3, r4, #4
 8002878:	1af2      	subs	r2, r6, r3
 800287a:	d0b6      	beq.n	80027ea <_malloc_r+0x22>
 800287c:	1b9b      	subs	r3, r3, r6
 800287e:	50a3      	str	r3, [r4, r2]
 8002880:	e7b3      	b.n	80027ea <_malloc_r+0x22>
 8002882:	6862      	ldr	r2, [r4, #4]
 8002884:	42a3      	cmp	r3, r4
 8002886:	bf0c      	ite	eq
 8002888:	6032      	streq	r2, [r6, #0]
 800288a:	605a      	strne	r2, [r3, #4]
 800288c:	e7ec      	b.n	8002868 <_malloc_r+0xa0>
 800288e:	4623      	mov	r3, r4
 8002890:	6864      	ldr	r4, [r4, #4]
 8002892:	e7b2      	b.n	80027fa <_malloc_r+0x32>
 8002894:	4634      	mov	r4, r6
 8002896:	6876      	ldr	r6, [r6, #4]
 8002898:	e7b9      	b.n	800280e <_malloc_r+0x46>
 800289a:	230c      	movs	r3, #12
 800289c:	4638      	mov	r0, r7
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	f000 fd74 	bl	800338c <__malloc_unlock>
 80028a4:	e7a1      	b.n	80027ea <_malloc_r+0x22>
 80028a6:	6025      	str	r5, [r4, #0]
 80028a8:	e7de      	b.n	8002868 <_malloc_r+0xa0>
 80028aa:	bf00      	nop
 80028ac:	20000110 	.word	0x20000110

080028b0 <__sfputc_r>:
 80028b0:	6893      	ldr	r3, [r2, #8]
 80028b2:	b410      	push	{r4}
 80028b4:	3b01      	subs	r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	6093      	str	r3, [r2, #8]
 80028ba:	da07      	bge.n	80028cc <__sfputc_r+0x1c>
 80028bc:	6994      	ldr	r4, [r2, #24]
 80028be:	42a3      	cmp	r3, r4
 80028c0:	db01      	blt.n	80028c6 <__sfputc_r+0x16>
 80028c2:	290a      	cmp	r1, #10
 80028c4:	d102      	bne.n	80028cc <__sfputc_r+0x1c>
 80028c6:	bc10      	pop	{r4}
 80028c8:	f000 bb34 	b.w	8002f34 <__swbuf_r>
 80028cc:	6813      	ldr	r3, [r2, #0]
 80028ce:	1c58      	adds	r0, r3, #1
 80028d0:	6010      	str	r0, [r2, #0]
 80028d2:	7019      	strb	r1, [r3, #0]
 80028d4:	4608      	mov	r0, r1
 80028d6:	bc10      	pop	{r4}
 80028d8:	4770      	bx	lr

080028da <__sfputs_r>:
 80028da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028dc:	4606      	mov	r6, r0
 80028de:	460f      	mov	r7, r1
 80028e0:	4614      	mov	r4, r2
 80028e2:	18d5      	adds	r5, r2, r3
 80028e4:	42ac      	cmp	r4, r5
 80028e6:	d101      	bne.n	80028ec <__sfputs_r+0x12>
 80028e8:	2000      	movs	r0, #0
 80028ea:	e007      	b.n	80028fc <__sfputs_r+0x22>
 80028ec:	463a      	mov	r2, r7
 80028ee:	4630      	mov	r0, r6
 80028f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f4:	f7ff ffdc 	bl	80028b0 <__sfputc_r>
 80028f8:	1c43      	adds	r3, r0, #1
 80028fa:	d1f3      	bne.n	80028e4 <__sfputs_r+0xa>
 80028fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002900 <_vfiprintf_r>:
 8002900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002904:	460d      	mov	r5, r1
 8002906:	4614      	mov	r4, r2
 8002908:	4698      	mov	r8, r3
 800290a:	4606      	mov	r6, r0
 800290c:	b09d      	sub	sp, #116	; 0x74
 800290e:	b118      	cbz	r0, 8002918 <_vfiprintf_r+0x18>
 8002910:	6983      	ldr	r3, [r0, #24]
 8002912:	b90b      	cbnz	r3, 8002918 <_vfiprintf_r+0x18>
 8002914:	f7ff fe98 	bl	8002648 <__sinit>
 8002918:	4b89      	ldr	r3, [pc, #548]	; (8002b40 <_vfiprintf_r+0x240>)
 800291a:	429d      	cmp	r5, r3
 800291c:	d11b      	bne.n	8002956 <_vfiprintf_r+0x56>
 800291e:	6875      	ldr	r5, [r6, #4]
 8002920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002922:	07d9      	lsls	r1, r3, #31
 8002924:	d405      	bmi.n	8002932 <_vfiprintf_r+0x32>
 8002926:	89ab      	ldrh	r3, [r5, #12]
 8002928:	059a      	lsls	r2, r3, #22
 800292a:	d402      	bmi.n	8002932 <_vfiprintf_r+0x32>
 800292c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800292e:	f7ff ff29 	bl	8002784 <__retarget_lock_acquire_recursive>
 8002932:	89ab      	ldrh	r3, [r5, #12]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	d501      	bpl.n	800293c <_vfiprintf_r+0x3c>
 8002938:	692b      	ldr	r3, [r5, #16]
 800293a:	b9eb      	cbnz	r3, 8002978 <_vfiprintf_r+0x78>
 800293c:	4629      	mov	r1, r5
 800293e:	4630      	mov	r0, r6
 8002940:	f000 fb5c 	bl	8002ffc <__swsetup_r>
 8002944:	b1c0      	cbz	r0, 8002978 <_vfiprintf_r+0x78>
 8002946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002948:	07dc      	lsls	r4, r3, #31
 800294a:	d50e      	bpl.n	800296a <_vfiprintf_r+0x6a>
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	b01d      	add	sp, #116	; 0x74
 8002952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002956:	4b7b      	ldr	r3, [pc, #492]	; (8002b44 <_vfiprintf_r+0x244>)
 8002958:	429d      	cmp	r5, r3
 800295a:	d101      	bne.n	8002960 <_vfiprintf_r+0x60>
 800295c:	68b5      	ldr	r5, [r6, #8]
 800295e:	e7df      	b.n	8002920 <_vfiprintf_r+0x20>
 8002960:	4b79      	ldr	r3, [pc, #484]	; (8002b48 <_vfiprintf_r+0x248>)
 8002962:	429d      	cmp	r5, r3
 8002964:	bf08      	it	eq
 8002966:	68f5      	ldreq	r5, [r6, #12]
 8002968:	e7da      	b.n	8002920 <_vfiprintf_r+0x20>
 800296a:	89ab      	ldrh	r3, [r5, #12]
 800296c:	0598      	lsls	r0, r3, #22
 800296e:	d4ed      	bmi.n	800294c <_vfiprintf_r+0x4c>
 8002970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002972:	f7ff ff08 	bl	8002786 <__retarget_lock_release_recursive>
 8002976:	e7e9      	b.n	800294c <_vfiprintf_r+0x4c>
 8002978:	2300      	movs	r3, #0
 800297a:	9309      	str	r3, [sp, #36]	; 0x24
 800297c:	2320      	movs	r3, #32
 800297e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002982:	2330      	movs	r3, #48	; 0x30
 8002984:	f04f 0901 	mov.w	r9, #1
 8002988:	f8cd 800c 	str.w	r8, [sp, #12]
 800298c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002b4c <_vfiprintf_r+0x24c>
 8002990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002994:	4623      	mov	r3, r4
 8002996:	469a      	mov	sl, r3
 8002998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800299c:	b10a      	cbz	r2, 80029a2 <_vfiprintf_r+0xa2>
 800299e:	2a25      	cmp	r2, #37	; 0x25
 80029a0:	d1f9      	bne.n	8002996 <_vfiprintf_r+0x96>
 80029a2:	ebba 0b04 	subs.w	fp, sl, r4
 80029a6:	d00b      	beq.n	80029c0 <_vfiprintf_r+0xc0>
 80029a8:	465b      	mov	r3, fp
 80029aa:	4622      	mov	r2, r4
 80029ac:	4629      	mov	r1, r5
 80029ae:	4630      	mov	r0, r6
 80029b0:	f7ff ff93 	bl	80028da <__sfputs_r>
 80029b4:	3001      	adds	r0, #1
 80029b6:	f000 80aa 	beq.w	8002b0e <_vfiprintf_r+0x20e>
 80029ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029bc:	445a      	add	r2, fp
 80029be:	9209      	str	r2, [sp, #36]	; 0x24
 80029c0:	f89a 3000 	ldrb.w	r3, [sl]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a2 	beq.w	8002b0e <_vfiprintf_r+0x20e>
 80029ca:	2300      	movs	r3, #0
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029d4:	f10a 0a01 	add.w	sl, sl, #1
 80029d8:	9304      	str	r3, [sp, #16]
 80029da:	9307      	str	r3, [sp, #28]
 80029dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029e0:	931a      	str	r3, [sp, #104]	; 0x68
 80029e2:	4654      	mov	r4, sl
 80029e4:	2205      	movs	r2, #5
 80029e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ea:	4858      	ldr	r0, [pc, #352]	; (8002b4c <_vfiprintf_r+0x24c>)
 80029ec:	f000 fcba 	bl	8003364 <memchr>
 80029f0:	9a04      	ldr	r2, [sp, #16]
 80029f2:	b9d8      	cbnz	r0, 8002a2c <_vfiprintf_r+0x12c>
 80029f4:	06d1      	lsls	r1, r2, #27
 80029f6:	bf44      	itt	mi
 80029f8:	2320      	movmi	r3, #32
 80029fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029fe:	0713      	lsls	r3, r2, #28
 8002a00:	bf44      	itt	mi
 8002a02:	232b      	movmi	r3, #43	; 0x2b
 8002a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a08:	f89a 3000 	ldrb.w	r3, [sl]
 8002a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a0e:	d015      	beq.n	8002a3c <_vfiprintf_r+0x13c>
 8002a10:	4654      	mov	r4, sl
 8002a12:	2000      	movs	r0, #0
 8002a14:	f04f 0c0a 	mov.w	ip, #10
 8002a18:	9a07      	ldr	r2, [sp, #28]
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a20:	3b30      	subs	r3, #48	; 0x30
 8002a22:	2b09      	cmp	r3, #9
 8002a24:	d94e      	bls.n	8002ac4 <_vfiprintf_r+0x1c4>
 8002a26:	b1b0      	cbz	r0, 8002a56 <_vfiprintf_r+0x156>
 8002a28:	9207      	str	r2, [sp, #28]
 8002a2a:	e014      	b.n	8002a56 <_vfiprintf_r+0x156>
 8002a2c:	eba0 0308 	sub.w	r3, r0, r8
 8002a30:	fa09 f303 	lsl.w	r3, r9, r3
 8002a34:	4313      	orrs	r3, r2
 8002a36:	46a2      	mov	sl, r4
 8002a38:	9304      	str	r3, [sp, #16]
 8002a3a:	e7d2      	b.n	80029e2 <_vfiprintf_r+0xe2>
 8002a3c:	9b03      	ldr	r3, [sp, #12]
 8002a3e:	1d19      	adds	r1, r3, #4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	9103      	str	r1, [sp, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bfbb      	ittet	lt
 8002a48:	425b      	neglt	r3, r3
 8002a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8002a4e:	9307      	strge	r3, [sp, #28]
 8002a50:	9307      	strlt	r3, [sp, #28]
 8002a52:	bfb8      	it	lt
 8002a54:	9204      	strlt	r2, [sp, #16]
 8002a56:	7823      	ldrb	r3, [r4, #0]
 8002a58:	2b2e      	cmp	r3, #46	; 0x2e
 8002a5a:	d10c      	bne.n	8002a76 <_vfiprintf_r+0x176>
 8002a5c:	7863      	ldrb	r3, [r4, #1]
 8002a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a60:	d135      	bne.n	8002ace <_vfiprintf_r+0x1ce>
 8002a62:	9b03      	ldr	r3, [sp, #12]
 8002a64:	3402      	adds	r4, #2
 8002a66:	1d1a      	adds	r2, r3, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	9203      	str	r2, [sp, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bfb8      	it	lt
 8002a70:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a74:	9305      	str	r3, [sp, #20]
 8002a76:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002b50 <_vfiprintf_r+0x250>
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	4650      	mov	r0, sl
 8002a7e:	7821      	ldrb	r1, [r4, #0]
 8002a80:	f000 fc70 	bl	8003364 <memchr>
 8002a84:	b140      	cbz	r0, 8002a98 <_vfiprintf_r+0x198>
 8002a86:	2340      	movs	r3, #64	; 0x40
 8002a88:	eba0 000a 	sub.w	r0, r0, sl
 8002a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8002a90:	9b04      	ldr	r3, [sp, #16]
 8002a92:	3401      	adds	r4, #1
 8002a94:	4303      	orrs	r3, r0
 8002a96:	9304      	str	r3, [sp, #16]
 8002a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a9c:	2206      	movs	r2, #6
 8002a9e:	482d      	ldr	r0, [pc, #180]	; (8002b54 <_vfiprintf_r+0x254>)
 8002aa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002aa4:	f000 fc5e 	bl	8003364 <memchr>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d03f      	beq.n	8002b2c <_vfiprintf_r+0x22c>
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <_vfiprintf_r+0x258>)
 8002aae:	bb1b      	cbnz	r3, 8002af8 <_vfiprintf_r+0x1f8>
 8002ab0:	9b03      	ldr	r3, [sp, #12]
 8002ab2:	3307      	adds	r3, #7
 8002ab4:	f023 0307 	bic.w	r3, r3, #7
 8002ab8:	3308      	adds	r3, #8
 8002aba:	9303      	str	r3, [sp, #12]
 8002abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002abe:	443b      	add	r3, r7
 8002ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ac2:	e767      	b.n	8002994 <_vfiprintf_r+0x94>
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002acc:	e7a5      	b.n	8002a1a <_vfiprintf_r+0x11a>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f04f 0c0a 	mov.w	ip, #10
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	3401      	adds	r4, #1
 8002ad8:	9305      	str	r3, [sp, #20]
 8002ada:	4620      	mov	r0, r4
 8002adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ae0:	3a30      	subs	r2, #48	; 0x30
 8002ae2:	2a09      	cmp	r2, #9
 8002ae4:	d903      	bls.n	8002aee <_vfiprintf_r+0x1ee>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0c5      	beq.n	8002a76 <_vfiprintf_r+0x176>
 8002aea:	9105      	str	r1, [sp, #20]
 8002aec:	e7c3      	b.n	8002a76 <_vfiprintf_r+0x176>
 8002aee:	4604      	mov	r4, r0
 8002af0:	2301      	movs	r3, #1
 8002af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002af6:	e7f0      	b.n	8002ada <_vfiprintf_r+0x1da>
 8002af8:	ab03      	add	r3, sp, #12
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	462a      	mov	r2, r5
 8002afe:	4630      	mov	r0, r6
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <_vfiprintf_r+0x25c>)
 8002b02:	a904      	add	r1, sp, #16
 8002b04:	f3af 8000 	nop.w
 8002b08:	4607      	mov	r7, r0
 8002b0a:	1c78      	adds	r0, r7, #1
 8002b0c:	d1d6      	bne.n	8002abc <_vfiprintf_r+0x1bc>
 8002b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b10:	07d9      	lsls	r1, r3, #31
 8002b12:	d405      	bmi.n	8002b20 <_vfiprintf_r+0x220>
 8002b14:	89ab      	ldrh	r3, [r5, #12]
 8002b16:	059a      	lsls	r2, r3, #22
 8002b18:	d402      	bmi.n	8002b20 <_vfiprintf_r+0x220>
 8002b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b1c:	f7ff fe33 	bl	8002786 <__retarget_lock_release_recursive>
 8002b20:	89ab      	ldrh	r3, [r5, #12]
 8002b22:	065b      	lsls	r3, r3, #25
 8002b24:	f53f af12 	bmi.w	800294c <_vfiprintf_r+0x4c>
 8002b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b2a:	e711      	b.n	8002950 <_vfiprintf_r+0x50>
 8002b2c:	ab03      	add	r3, sp, #12
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	462a      	mov	r2, r5
 8002b32:	4630      	mov	r0, r6
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <_vfiprintf_r+0x25c>)
 8002b36:	a904      	add	r1, sp, #16
 8002b38:	f000 f882 	bl	8002c40 <_printf_i>
 8002b3c:	e7e4      	b.n	8002b08 <_vfiprintf_r+0x208>
 8002b3e:	bf00      	nop
 8002b40:	08003518 	.word	0x08003518
 8002b44:	08003538 	.word	0x08003538
 8002b48:	080034f8 	.word	0x080034f8
 8002b4c:	08003558 	.word	0x08003558
 8002b50:	0800355e 	.word	0x0800355e
 8002b54:	08003562 	.word	0x08003562
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	080028db 	.word	0x080028db

08002b60 <_printf_common>:
 8002b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b64:	4616      	mov	r6, r2
 8002b66:	4699      	mov	r9, r3
 8002b68:	688a      	ldr	r2, [r1, #8]
 8002b6a:	690b      	ldr	r3, [r1, #16]
 8002b6c:	4607      	mov	r7, r0
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	bfb8      	it	lt
 8002b72:	4613      	movlt	r3, r2
 8002b74:	6033      	str	r3, [r6, #0]
 8002b76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b80:	b10a      	cbz	r2, 8002b86 <_printf_common+0x26>
 8002b82:	3301      	adds	r3, #1
 8002b84:	6033      	str	r3, [r6, #0]
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	0699      	lsls	r1, r3, #26
 8002b8a:	bf42      	ittt	mi
 8002b8c:	6833      	ldrmi	r3, [r6, #0]
 8002b8e:	3302      	addmi	r3, #2
 8002b90:	6033      	strmi	r3, [r6, #0]
 8002b92:	6825      	ldr	r5, [r4, #0]
 8002b94:	f015 0506 	ands.w	r5, r5, #6
 8002b98:	d106      	bne.n	8002ba8 <_printf_common+0x48>
 8002b9a:	f104 0a19 	add.w	sl, r4, #25
 8002b9e:	68e3      	ldr	r3, [r4, #12]
 8002ba0:	6832      	ldr	r2, [r6, #0]
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	42ab      	cmp	r3, r5
 8002ba6:	dc28      	bgt.n	8002bfa <_printf_common+0x9a>
 8002ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bac:	1e13      	subs	r3, r2, #0
 8002bae:	6822      	ldr	r2, [r4, #0]
 8002bb0:	bf18      	it	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	0692      	lsls	r2, r2, #26
 8002bb6:	d42d      	bmi.n	8002c14 <_printf_common+0xb4>
 8002bb8:	4649      	mov	r1, r9
 8002bba:	4638      	mov	r0, r7
 8002bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bc0:	47c0      	blx	r8
 8002bc2:	3001      	adds	r0, #1
 8002bc4:	d020      	beq.n	8002c08 <_printf_common+0xa8>
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	68e5      	ldr	r5, [r4, #12]
 8002bca:	f003 0306 	and.w	r3, r3, #6
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	bf18      	it	ne
 8002bd2:	2500      	movne	r5, #0
 8002bd4:	6832      	ldr	r2, [r6, #0]
 8002bd6:	f04f 0600 	mov.w	r6, #0
 8002bda:	68a3      	ldr	r3, [r4, #8]
 8002bdc:	bf08      	it	eq
 8002bde:	1aad      	subeq	r5, r5, r2
 8002be0:	6922      	ldr	r2, [r4, #16]
 8002be2:	bf08      	it	eq
 8002be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002be8:	4293      	cmp	r3, r2
 8002bea:	bfc4      	itt	gt
 8002bec:	1a9b      	subgt	r3, r3, r2
 8002bee:	18ed      	addgt	r5, r5, r3
 8002bf0:	341a      	adds	r4, #26
 8002bf2:	42b5      	cmp	r5, r6
 8002bf4:	d11a      	bne.n	8002c2c <_printf_common+0xcc>
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	e008      	b.n	8002c0c <_printf_common+0xac>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	4652      	mov	r2, sl
 8002bfe:	4649      	mov	r1, r9
 8002c00:	4638      	mov	r0, r7
 8002c02:	47c0      	blx	r8
 8002c04:	3001      	adds	r0, #1
 8002c06:	d103      	bne.n	8002c10 <_printf_common+0xb0>
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c10:	3501      	adds	r5, #1
 8002c12:	e7c4      	b.n	8002b9e <_printf_common+0x3e>
 8002c14:	2030      	movs	r0, #48	; 0x30
 8002c16:	18e1      	adds	r1, r4, r3
 8002c18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c22:	4422      	add	r2, r4
 8002c24:	3302      	adds	r3, #2
 8002c26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c2a:	e7c5      	b.n	8002bb8 <_printf_common+0x58>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	4622      	mov	r2, r4
 8002c30:	4649      	mov	r1, r9
 8002c32:	4638      	mov	r0, r7
 8002c34:	47c0      	blx	r8
 8002c36:	3001      	adds	r0, #1
 8002c38:	d0e6      	beq.n	8002c08 <_printf_common+0xa8>
 8002c3a:	3601      	adds	r6, #1
 8002c3c:	e7d9      	b.n	8002bf2 <_printf_common+0x92>
	...

08002c40 <_printf_i>:
 8002c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c44:	7e0f      	ldrb	r7, [r1, #24]
 8002c46:	4691      	mov	r9, r2
 8002c48:	2f78      	cmp	r7, #120	; 0x78
 8002c4a:	4680      	mov	r8, r0
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	469a      	mov	sl, r3
 8002c50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c56:	d807      	bhi.n	8002c68 <_printf_i+0x28>
 8002c58:	2f62      	cmp	r7, #98	; 0x62
 8002c5a:	d80a      	bhi.n	8002c72 <_printf_i+0x32>
 8002c5c:	2f00      	cmp	r7, #0
 8002c5e:	f000 80d9 	beq.w	8002e14 <_printf_i+0x1d4>
 8002c62:	2f58      	cmp	r7, #88	; 0x58
 8002c64:	f000 80a4 	beq.w	8002db0 <_printf_i+0x170>
 8002c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c70:	e03a      	b.n	8002ce8 <_printf_i+0xa8>
 8002c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c76:	2b15      	cmp	r3, #21
 8002c78:	d8f6      	bhi.n	8002c68 <_printf_i+0x28>
 8002c7a:	a101      	add	r1, pc, #4	; (adr r1, 8002c80 <_printf_i+0x40>)
 8002c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c80:	08002cd9 	.word	0x08002cd9
 8002c84:	08002ced 	.word	0x08002ced
 8002c88:	08002c69 	.word	0x08002c69
 8002c8c:	08002c69 	.word	0x08002c69
 8002c90:	08002c69 	.word	0x08002c69
 8002c94:	08002c69 	.word	0x08002c69
 8002c98:	08002ced 	.word	0x08002ced
 8002c9c:	08002c69 	.word	0x08002c69
 8002ca0:	08002c69 	.word	0x08002c69
 8002ca4:	08002c69 	.word	0x08002c69
 8002ca8:	08002c69 	.word	0x08002c69
 8002cac:	08002dfb 	.word	0x08002dfb
 8002cb0:	08002d1d 	.word	0x08002d1d
 8002cb4:	08002ddd 	.word	0x08002ddd
 8002cb8:	08002c69 	.word	0x08002c69
 8002cbc:	08002c69 	.word	0x08002c69
 8002cc0:	08002e1d 	.word	0x08002e1d
 8002cc4:	08002c69 	.word	0x08002c69
 8002cc8:	08002d1d 	.word	0x08002d1d
 8002ccc:	08002c69 	.word	0x08002c69
 8002cd0:	08002c69 	.word	0x08002c69
 8002cd4:	08002de5 	.word	0x08002de5
 8002cd8:	682b      	ldr	r3, [r5, #0]
 8002cda:	1d1a      	adds	r2, r3, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	602a      	str	r2, [r5, #0]
 8002ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0a4      	b.n	8002e36 <_printf_i+0x1f6>
 8002cec:	6820      	ldr	r0, [r4, #0]
 8002cee:	6829      	ldr	r1, [r5, #0]
 8002cf0:	0606      	lsls	r6, r0, #24
 8002cf2:	f101 0304 	add.w	r3, r1, #4
 8002cf6:	d50a      	bpl.n	8002d0e <_printf_i+0xce>
 8002cf8:	680e      	ldr	r6, [r1, #0]
 8002cfa:	602b      	str	r3, [r5, #0]
 8002cfc:	2e00      	cmp	r6, #0
 8002cfe:	da03      	bge.n	8002d08 <_printf_i+0xc8>
 8002d00:	232d      	movs	r3, #45	; 0x2d
 8002d02:	4276      	negs	r6, r6
 8002d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d08:	230a      	movs	r3, #10
 8002d0a:	485e      	ldr	r0, [pc, #376]	; (8002e84 <_printf_i+0x244>)
 8002d0c:	e019      	b.n	8002d42 <_printf_i+0x102>
 8002d0e:	680e      	ldr	r6, [r1, #0]
 8002d10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d14:	602b      	str	r3, [r5, #0]
 8002d16:	bf18      	it	ne
 8002d18:	b236      	sxthne	r6, r6
 8002d1a:	e7ef      	b.n	8002cfc <_printf_i+0xbc>
 8002d1c:	682b      	ldr	r3, [r5, #0]
 8002d1e:	6820      	ldr	r0, [r4, #0]
 8002d20:	1d19      	adds	r1, r3, #4
 8002d22:	6029      	str	r1, [r5, #0]
 8002d24:	0601      	lsls	r1, r0, #24
 8002d26:	d501      	bpl.n	8002d2c <_printf_i+0xec>
 8002d28:	681e      	ldr	r6, [r3, #0]
 8002d2a:	e002      	b.n	8002d32 <_printf_i+0xf2>
 8002d2c:	0646      	lsls	r6, r0, #25
 8002d2e:	d5fb      	bpl.n	8002d28 <_printf_i+0xe8>
 8002d30:	881e      	ldrh	r6, [r3, #0]
 8002d32:	2f6f      	cmp	r7, #111	; 0x6f
 8002d34:	bf0c      	ite	eq
 8002d36:	2308      	moveq	r3, #8
 8002d38:	230a      	movne	r3, #10
 8002d3a:	4852      	ldr	r0, [pc, #328]	; (8002e84 <_printf_i+0x244>)
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d42:	6865      	ldr	r5, [r4, #4]
 8002d44:	2d00      	cmp	r5, #0
 8002d46:	bfa8      	it	ge
 8002d48:	6821      	ldrge	r1, [r4, #0]
 8002d4a:	60a5      	str	r5, [r4, #8]
 8002d4c:	bfa4      	itt	ge
 8002d4e:	f021 0104 	bicge.w	r1, r1, #4
 8002d52:	6021      	strge	r1, [r4, #0]
 8002d54:	b90e      	cbnz	r6, 8002d5a <_printf_i+0x11a>
 8002d56:	2d00      	cmp	r5, #0
 8002d58:	d04d      	beq.n	8002df6 <_printf_i+0x1b6>
 8002d5a:	4615      	mov	r5, r2
 8002d5c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d60:	fb03 6711 	mls	r7, r3, r1, r6
 8002d64:	5dc7      	ldrb	r7, [r0, r7]
 8002d66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d6a:	4637      	mov	r7, r6
 8002d6c:	42bb      	cmp	r3, r7
 8002d6e:	460e      	mov	r6, r1
 8002d70:	d9f4      	bls.n	8002d5c <_printf_i+0x11c>
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d10b      	bne.n	8002d8e <_printf_i+0x14e>
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	07de      	lsls	r6, r3, #31
 8002d7a:	d508      	bpl.n	8002d8e <_printf_i+0x14e>
 8002d7c:	6923      	ldr	r3, [r4, #16]
 8002d7e:	6861      	ldr	r1, [r4, #4]
 8002d80:	4299      	cmp	r1, r3
 8002d82:	bfde      	ittt	le
 8002d84:	2330      	movle	r3, #48	; 0x30
 8002d86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d8e:	1b52      	subs	r2, r2, r5
 8002d90:	6122      	str	r2, [r4, #16]
 8002d92:	464b      	mov	r3, r9
 8002d94:	4621      	mov	r1, r4
 8002d96:	4640      	mov	r0, r8
 8002d98:	f8cd a000 	str.w	sl, [sp]
 8002d9c:	aa03      	add	r2, sp, #12
 8002d9e:	f7ff fedf 	bl	8002b60 <_printf_common>
 8002da2:	3001      	adds	r0, #1
 8002da4:	d14c      	bne.n	8002e40 <_printf_i+0x200>
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295
 8002daa:	b004      	add	sp, #16
 8002dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db0:	4834      	ldr	r0, [pc, #208]	; (8002e84 <_printf_i+0x244>)
 8002db2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002db6:	6829      	ldr	r1, [r5, #0]
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	f851 6b04 	ldr.w	r6, [r1], #4
 8002dbe:	6029      	str	r1, [r5, #0]
 8002dc0:	061d      	lsls	r5, r3, #24
 8002dc2:	d514      	bpl.n	8002dee <_printf_i+0x1ae>
 8002dc4:	07df      	lsls	r7, r3, #31
 8002dc6:	bf44      	itt	mi
 8002dc8:	f043 0320 	orrmi.w	r3, r3, #32
 8002dcc:	6023      	strmi	r3, [r4, #0]
 8002dce:	b91e      	cbnz	r6, 8002dd8 <_printf_i+0x198>
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	f023 0320 	bic.w	r3, r3, #32
 8002dd6:	6023      	str	r3, [r4, #0]
 8002dd8:	2310      	movs	r3, #16
 8002dda:	e7af      	b.n	8002d3c <_printf_i+0xfc>
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	f043 0320 	orr.w	r3, r3, #32
 8002de2:	6023      	str	r3, [r4, #0]
 8002de4:	2378      	movs	r3, #120	; 0x78
 8002de6:	4828      	ldr	r0, [pc, #160]	; (8002e88 <_printf_i+0x248>)
 8002de8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dec:	e7e3      	b.n	8002db6 <_printf_i+0x176>
 8002dee:	0659      	lsls	r1, r3, #25
 8002df0:	bf48      	it	mi
 8002df2:	b2b6      	uxthmi	r6, r6
 8002df4:	e7e6      	b.n	8002dc4 <_printf_i+0x184>
 8002df6:	4615      	mov	r5, r2
 8002df8:	e7bb      	b.n	8002d72 <_printf_i+0x132>
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	6826      	ldr	r6, [r4, #0]
 8002dfe:	1d18      	adds	r0, r3, #4
 8002e00:	6961      	ldr	r1, [r4, #20]
 8002e02:	6028      	str	r0, [r5, #0]
 8002e04:	0635      	lsls	r5, r6, #24
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	d501      	bpl.n	8002e0e <_printf_i+0x1ce>
 8002e0a:	6019      	str	r1, [r3, #0]
 8002e0c:	e002      	b.n	8002e14 <_printf_i+0x1d4>
 8002e0e:	0670      	lsls	r0, r6, #25
 8002e10:	d5fb      	bpl.n	8002e0a <_printf_i+0x1ca>
 8002e12:	8019      	strh	r1, [r3, #0]
 8002e14:	2300      	movs	r3, #0
 8002e16:	4615      	mov	r5, r2
 8002e18:	6123      	str	r3, [r4, #16]
 8002e1a:	e7ba      	b.n	8002d92 <_printf_i+0x152>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	2100      	movs	r1, #0
 8002e20:	1d1a      	adds	r2, r3, #4
 8002e22:	602a      	str	r2, [r5, #0]
 8002e24:	681d      	ldr	r5, [r3, #0]
 8002e26:	6862      	ldr	r2, [r4, #4]
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 fa9b 	bl	8003364 <memchr>
 8002e2e:	b108      	cbz	r0, 8002e34 <_printf_i+0x1f4>
 8002e30:	1b40      	subs	r0, r0, r5
 8002e32:	6060      	str	r0, [r4, #4]
 8002e34:	6863      	ldr	r3, [r4, #4]
 8002e36:	6123      	str	r3, [r4, #16]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e3e:	e7a8      	b.n	8002d92 <_printf_i+0x152>
 8002e40:	462a      	mov	r2, r5
 8002e42:	4649      	mov	r1, r9
 8002e44:	4640      	mov	r0, r8
 8002e46:	6923      	ldr	r3, [r4, #16]
 8002e48:	47d0      	blx	sl
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	d0ab      	beq.n	8002da6 <_printf_i+0x166>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	079b      	lsls	r3, r3, #30
 8002e52:	d413      	bmi.n	8002e7c <_printf_i+0x23c>
 8002e54:	68e0      	ldr	r0, [r4, #12]
 8002e56:	9b03      	ldr	r3, [sp, #12]
 8002e58:	4298      	cmp	r0, r3
 8002e5a:	bfb8      	it	lt
 8002e5c:	4618      	movlt	r0, r3
 8002e5e:	e7a4      	b.n	8002daa <_printf_i+0x16a>
 8002e60:	2301      	movs	r3, #1
 8002e62:	4632      	mov	r2, r6
 8002e64:	4649      	mov	r1, r9
 8002e66:	4640      	mov	r0, r8
 8002e68:	47d0      	blx	sl
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d09b      	beq.n	8002da6 <_printf_i+0x166>
 8002e6e:	3501      	adds	r5, #1
 8002e70:	68e3      	ldr	r3, [r4, #12]
 8002e72:	9903      	ldr	r1, [sp, #12]
 8002e74:	1a5b      	subs	r3, r3, r1
 8002e76:	42ab      	cmp	r3, r5
 8002e78:	dcf2      	bgt.n	8002e60 <_printf_i+0x220>
 8002e7a:	e7eb      	b.n	8002e54 <_printf_i+0x214>
 8002e7c:	2500      	movs	r5, #0
 8002e7e:	f104 0619 	add.w	r6, r4, #25
 8002e82:	e7f5      	b.n	8002e70 <_printf_i+0x230>
 8002e84:	08003569 	.word	0x08003569
 8002e88:	0800357a 	.word	0x0800357a

08002e8c <_sbrk_r>:
 8002e8c:	b538      	push	{r3, r4, r5, lr}
 8002e8e:	2300      	movs	r3, #0
 8002e90:	4d05      	ldr	r5, [pc, #20]	; (8002ea8 <_sbrk_r+0x1c>)
 8002e92:	4604      	mov	r4, r0
 8002e94:	4608      	mov	r0, r1
 8002e96:	602b      	str	r3, [r5, #0]
 8002e98:	f7fd fc0c 	bl	80006b4 <_sbrk>
 8002e9c:	1c43      	adds	r3, r0, #1
 8002e9e:	d102      	bne.n	8002ea6 <_sbrk_r+0x1a>
 8002ea0:	682b      	ldr	r3, [r5, #0]
 8002ea2:	b103      	cbz	r3, 8002ea6 <_sbrk_r+0x1a>
 8002ea4:	6023      	str	r3, [r4, #0]
 8002ea6:	bd38      	pop	{r3, r4, r5, pc}
 8002ea8:	20000118 	.word	0x20000118

08002eac <__sread>:
 8002eac:	b510      	push	{r4, lr}
 8002eae:	460c      	mov	r4, r1
 8002eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb4:	f000 fab8 	bl	8003428 <_read_r>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	bfab      	itete	ge
 8002ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8002ec0:	181b      	addge	r3, r3, r0
 8002ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ec6:	bfac      	ite	ge
 8002ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002eca:	81a3      	strhlt	r3, [r4, #12]
 8002ecc:	bd10      	pop	{r4, pc}

08002ece <__swrite>:
 8002ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed2:	461f      	mov	r7, r3
 8002ed4:	898b      	ldrh	r3, [r1, #12]
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	05db      	lsls	r3, r3, #23
 8002eda:	460c      	mov	r4, r1
 8002edc:	4616      	mov	r6, r2
 8002ede:	d505      	bpl.n	8002eec <__swrite+0x1e>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee8:	f000 f9c4 	bl	8003274 <_lseek_r>
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	4632      	mov	r2, r6
 8002ef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ef4:	81a3      	strh	r3, [r4, #12]
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	463b      	mov	r3, r7
 8002efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f02:	f000 b869 	b.w	8002fd8 <_write_r>

08002f06 <__sseek>:
 8002f06:	b510      	push	{r4, lr}
 8002f08:	460c      	mov	r4, r1
 8002f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f0e:	f000 f9b1 	bl	8003274 <_lseek_r>
 8002f12:	1c43      	adds	r3, r0, #1
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	bf15      	itete	ne
 8002f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f22:	81a3      	strheq	r3, [r4, #12]
 8002f24:	bf18      	it	ne
 8002f26:	81a3      	strhne	r3, [r4, #12]
 8002f28:	bd10      	pop	{r4, pc}

08002f2a <__sclose>:
 8002f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f2e:	f000 b8d3 	b.w	80030d8 <_close_r>
	...

08002f34 <__swbuf_r>:
 8002f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f36:	460e      	mov	r6, r1
 8002f38:	4614      	mov	r4, r2
 8002f3a:	4605      	mov	r5, r0
 8002f3c:	b118      	cbz	r0, 8002f46 <__swbuf_r+0x12>
 8002f3e:	6983      	ldr	r3, [r0, #24]
 8002f40:	b90b      	cbnz	r3, 8002f46 <__swbuf_r+0x12>
 8002f42:	f7ff fb81 	bl	8002648 <__sinit>
 8002f46:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <__swbuf_r+0x98>)
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	d12b      	bne.n	8002fa4 <__swbuf_r+0x70>
 8002f4c:	686c      	ldr	r4, [r5, #4]
 8002f4e:	69a3      	ldr	r3, [r4, #24]
 8002f50:	60a3      	str	r3, [r4, #8]
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	071a      	lsls	r2, r3, #28
 8002f56:	d52f      	bpl.n	8002fb8 <__swbuf_r+0x84>
 8002f58:	6923      	ldr	r3, [r4, #16]
 8002f5a:	b36b      	cbz	r3, 8002fb8 <__swbuf_r+0x84>
 8002f5c:	6923      	ldr	r3, [r4, #16]
 8002f5e:	6820      	ldr	r0, [r4, #0]
 8002f60:	b2f6      	uxtb	r6, r6
 8002f62:	1ac0      	subs	r0, r0, r3
 8002f64:	6963      	ldr	r3, [r4, #20]
 8002f66:	4637      	mov	r7, r6
 8002f68:	4283      	cmp	r3, r0
 8002f6a:	dc04      	bgt.n	8002f76 <__swbuf_r+0x42>
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f000 f944 	bl	80031fc <_fflush_r>
 8002f74:	bb30      	cbnz	r0, 8002fc4 <__swbuf_r+0x90>
 8002f76:	68a3      	ldr	r3, [r4, #8]
 8002f78:	3001      	adds	r0, #1
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	60a3      	str	r3, [r4, #8]
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	6022      	str	r2, [r4, #0]
 8002f84:	701e      	strb	r6, [r3, #0]
 8002f86:	6963      	ldr	r3, [r4, #20]
 8002f88:	4283      	cmp	r3, r0
 8002f8a:	d004      	beq.n	8002f96 <__swbuf_r+0x62>
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	07db      	lsls	r3, r3, #31
 8002f90:	d506      	bpl.n	8002fa0 <__swbuf_r+0x6c>
 8002f92:	2e0a      	cmp	r6, #10
 8002f94:	d104      	bne.n	8002fa0 <__swbuf_r+0x6c>
 8002f96:	4621      	mov	r1, r4
 8002f98:	4628      	mov	r0, r5
 8002f9a:	f000 f92f 	bl	80031fc <_fflush_r>
 8002f9e:	b988      	cbnz	r0, 8002fc4 <__swbuf_r+0x90>
 8002fa0:	4638      	mov	r0, r7
 8002fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <__swbuf_r+0x9c>)
 8002fa6:	429c      	cmp	r4, r3
 8002fa8:	d101      	bne.n	8002fae <__swbuf_r+0x7a>
 8002faa:	68ac      	ldr	r4, [r5, #8]
 8002fac:	e7cf      	b.n	8002f4e <__swbuf_r+0x1a>
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <__swbuf_r+0xa0>)
 8002fb0:	429c      	cmp	r4, r3
 8002fb2:	bf08      	it	eq
 8002fb4:	68ec      	ldreq	r4, [r5, #12]
 8002fb6:	e7ca      	b.n	8002f4e <__swbuf_r+0x1a>
 8002fb8:	4621      	mov	r1, r4
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f000 f81e 	bl	8002ffc <__swsetup_r>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d0cb      	beq.n	8002f5c <__swbuf_r+0x28>
 8002fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8002fc8:	e7ea      	b.n	8002fa0 <__swbuf_r+0x6c>
 8002fca:	bf00      	nop
 8002fcc:	08003518 	.word	0x08003518
 8002fd0:	08003538 	.word	0x08003538
 8002fd4:	080034f8 	.word	0x080034f8

08002fd8 <_write_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4d05      	ldr	r5, [pc, #20]	; (8002ff8 <_write_r+0x20>)
 8002fe4:	602a      	str	r2, [r5, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f7fd fb18 	bl	800061c <_write>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d102      	bne.n	8002ff6 <_write_r+0x1e>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	b103      	cbz	r3, 8002ff6 <_write_r+0x1e>
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	20000118 	.word	0x20000118

08002ffc <__swsetup_r>:
 8002ffc:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <__swsetup_r+0xcc>)
 8002ffe:	b570      	push	{r4, r5, r6, lr}
 8003000:	681d      	ldr	r5, [r3, #0]
 8003002:	4606      	mov	r6, r0
 8003004:	460c      	mov	r4, r1
 8003006:	b125      	cbz	r5, 8003012 <__swsetup_r+0x16>
 8003008:	69ab      	ldr	r3, [r5, #24]
 800300a:	b913      	cbnz	r3, 8003012 <__swsetup_r+0x16>
 800300c:	4628      	mov	r0, r5
 800300e:	f7ff fb1b 	bl	8002648 <__sinit>
 8003012:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <__swsetup_r+0xd0>)
 8003014:	429c      	cmp	r4, r3
 8003016:	d10f      	bne.n	8003038 <__swsetup_r+0x3c>
 8003018:	686c      	ldr	r4, [r5, #4]
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003020:	0719      	lsls	r1, r3, #28
 8003022:	d42c      	bmi.n	800307e <__swsetup_r+0x82>
 8003024:	06dd      	lsls	r5, r3, #27
 8003026:	d411      	bmi.n	800304c <__swsetup_r+0x50>
 8003028:	2309      	movs	r3, #9
 800302a:	6033      	str	r3, [r6, #0]
 800302c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	81a3      	strh	r3, [r4, #12]
 8003036:	e03e      	b.n	80030b6 <__swsetup_r+0xba>
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <__swsetup_r+0xd4>)
 800303a:	429c      	cmp	r4, r3
 800303c:	d101      	bne.n	8003042 <__swsetup_r+0x46>
 800303e:	68ac      	ldr	r4, [r5, #8]
 8003040:	e7eb      	b.n	800301a <__swsetup_r+0x1e>
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <__swsetup_r+0xd8>)
 8003044:	429c      	cmp	r4, r3
 8003046:	bf08      	it	eq
 8003048:	68ec      	ldreq	r4, [r5, #12]
 800304a:	e7e6      	b.n	800301a <__swsetup_r+0x1e>
 800304c:	0758      	lsls	r0, r3, #29
 800304e:	d512      	bpl.n	8003076 <__swsetup_r+0x7a>
 8003050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003052:	b141      	cbz	r1, 8003066 <__swsetup_r+0x6a>
 8003054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003058:	4299      	cmp	r1, r3
 800305a:	d002      	beq.n	8003062 <__swsetup_r+0x66>
 800305c:	4630      	mov	r0, r6
 800305e:	f000 f99b 	bl	8003398 <_free_r>
 8003062:	2300      	movs	r3, #0
 8003064:	6363      	str	r3, [r4, #52]	; 0x34
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800306c:	81a3      	strh	r3, [r4, #12]
 800306e:	2300      	movs	r3, #0
 8003070:	6063      	str	r3, [r4, #4]
 8003072:	6923      	ldr	r3, [r4, #16]
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	89a3      	ldrh	r3, [r4, #12]
 8003078:	f043 0308 	orr.w	r3, r3, #8
 800307c:	81a3      	strh	r3, [r4, #12]
 800307e:	6923      	ldr	r3, [r4, #16]
 8003080:	b94b      	cbnz	r3, 8003096 <__swsetup_r+0x9a>
 8003082:	89a3      	ldrh	r3, [r4, #12]
 8003084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308c:	d003      	beq.n	8003096 <__swsetup_r+0x9a>
 800308e:	4621      	mov	r1, r4
 8003090:	4630      	mov	r0, r6
 8003092:	f000 f927 	bl	80032e4 <__smakebuf_r>
 8003096:	89a0      	ldrh	r0, [r4, #12]
 8003098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800309c:	f010 0301 	ands.w	r3, r0, #1
 80030a0:	d00a      	beq.n	80030b8 <__swsetup_r+0xbc>
 80030a2:	2300      	movs	r3, #0
 80030a4:	60a3      	str	r3, [r4, #8]
 80030a6:	6963      	ldr	r3, [r4, #20]
 80030a8:	425b      	negs	r3, r3
 80030aa:	61a3      	str	r3, [r4, #24]
 80030ac:	6923      	ldr	r3, [r4, #16]
 80030ae:	b943      	cbnz	r3, 80030c2 <__swsetup_r+0xc6>
 80030b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030b4:	d1ba      	bne.n	800302c <__swsetup_r+0x30>
 80030b6:	bd70      	pop	{r4, r5, r6, pc}
 80030b8:	0781      	lsls	r1, r0, #30
 80030ba:	bf58      	it	pl
 80030bc:	6963      	ldrpl	r3, [r4, #20]
 80030be:	60a3      	str	r3, [r4, #8]
 80030c0:	e7f4      	b.n	80030ac <__swsetup_r+0xb0>
 80030c2:	2000      	movs	r0, #0
 80030c4:	e7f7      	b.n	80030b6 <__swsetup_r+0xba>
 80030c6:	bf00      	nop
 80030c8:	2000000c 	.word	0x2000000c
 80030cc:	08003518 	.word	0x08003518
 80030d0:	08003538 	.word	0x08003538
 80030d4:	080034f8 	.word	0x080034f8

080030d8 <_close_r>:
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	2300      	movs	r3, #0
 80030dc:	4d05      	ldr	r5, [pc, #20]	; (80030f4 <_close_r+0x1c>)
 80030de:	4604      	mov	r4, r0
 80030e0:	4608      	mov	r0, r1
 80030e2:	602b      	str	r3, [r5, #0]
 80030e4:	f7fd fab6 	bl	8000654 <_close>
 80030e8:	1c43      	adds	r3, r0, #1
 80030ea:	d102      	bne.n	80030f2 <_close_r+0x1a>
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	b103      	cbz	r3, 80030f2 <_close_r+0x1a>
 80030f0:	6023      	str	r3, [r4, #0]
 80030f2:	bd38      	pop	{r3, r4, r5, pc}
 80030f4:	20000118 	.word	0x20000118

080030f8 <__sflush_r>:
 80030f8:	898a      	ldrh	r2, [r1, #12]
 80030fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fc:	4605      	mov	r5, r0
 80030fe:	0710      	lsls	r0, r2, #28
 8003100:	460c      	mov	r4, r1
 8003102:	d457      	bmi.n	80031b4 <__sflush_r+0xbc>
 8003104:	684b      	ldr	r3, [r1, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	dc04      	bgt.n	8003114 <__sflush_r+0x1c>
 800310a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	dc01      	bgt.n	8003114 <__sflush_r+0x1c>
 8003110:	2000      	movs	r0, #0
 8003112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003116:	2e00      	cmp	r6, #0
 8003118:	d0fa      	beq.n	8003110 <__sflush_r+0x18>
 800311a:	2300      	movs	r3, #0
 800311c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003120:	682f      	ldr	r7, [r5, #0]
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	d032      	beq.n	800318c <__sflush_r+0x94>
 8003126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	075a      	lsls	r2, r3, #29
 800312c:	d505      	bpl.n	800313a <__sflush_r+0x42>
 800312e:	6863      	ldr	r3, [r4, #4]
 8003130:	1ac0      	subs	r0, r0, r3
 8003132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003134:	b10b      	cbz	r3, 800313a <__sflush_r+0x42>
 8003136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003138:	1ac0      	subs	r0, r0, r3
 800313a:	2300      	movs	r3, #0
 800313c:	4602      	mov	r2, r0
 800313e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003140:	4628      	mov	r0, r5
 8003142:	6a21      	ldr	r1, [r4, #32]
 8003144:	47b0      	blx	r6
 8003146:	1c43      	adds	r3, r0, #1
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	d106      	bne.n	800315a <__sflush_r+0x62>
 800314c:	6829      	ldr	r1, [r5, #0]
 800314e:	291d      	cmp	r1, #29
 8003150:	d82c      	bhi.n	80031ac <__sflush_r+0xb4>
 8003152:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <__sflush_r+0x100>)
 8003154:	40ca      	lsrs	r2, r1
 8003156:	07d6      	lsls	r6, r2, #31
 8003158:	d528      	bpl.n	80031ac <__sflush_r+0xb4>
 800315a:	2200      	movs	r2, #0
 800315c:	6062      	str	r2, [r4, #4]
 800315e:	6922      	ldr	r2, [r4, #16]
 8003160:	04d9      	lsls	r1, r3, #19
 8003162:	6022      	str	r2, [r4, #0]
 8003164:	d504      	bpl.n	8003170 <__sflush_r+0x78>
 8003166:	1c42      	adds	r2, r0, #1
 8003168:	d101      	bne.n	800316e <__sflush_r+0x76>
 800316a:	682b      	ldr	r3, [r5, #0]
 800316c:	b903      	cbnz	r3, 8003170 <__sflush_r+0x78>
 800316e:	6560      	str	r0, [r4, #84]	; 0x54
 8003170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003172:	602f      	str	r7, [r5, #0]
 8003174:	2900      	cmp	r1, #0
 8003176:	d0cb      	beq.n	8003110 <__sflush_r+0x18>
 8003178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800317c:	4299      	cmp	r1, r3
 800317e:	d002      	beq.n	8003186 <__sflush_r+0x8e>
 8003180:	4628      	mov	r0, r5
 8003182:	f000 f909 	bl	8003398 <_free_r>
 8003186:	2000      	movs	r0, #0
 8003188:	6360      	str	r0, [r4, #52]	; 0x34
 800318a:	e7c2      	b.n	8003112 <__sflush_r+0x1a>
 800318c:	6a21      	ldr	r1, [r4, #32]
 800318e:	2301      	movs	r3, #1
 8003190:	4628      	mov	r0, r5
 8003192:	47b0      	blx	r6
 8003194:	1c41      	adds	r1, r0, #1
 8003196:	d1c7      	bne.n	8003128 <__sflush_r+0x30>
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0c4      	beq.n	8003128 <__sflush_r+0x30>
 800319e:	2b1d      	cmp	r3, #29
 80031a0:	d001      	beq.n	80031a6 <__sflush_r+0xae>
 80031a2:	2b16      	cmp	r3, #22
 80031a4:	d101      	bne.n	80031aa <__sflush_r+0xb2>
 80031a6:	602f      	str	r7, [r5, #0]
 80031a8:	e7b2      	b.n	8003110 <__sflush_r+0x18>
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b0:	81a3      	strh	r3, [r4, #12]
 80031b2:	e7ae      	b.n	8003112 <__sflush_r+0x1a>
 80031b4:	690f      	ldr	r7, [r1, #16]
 80031b6:	2f00      	cmp	r7, #0
 80031b8:	d0aa      	beq.n	8003110 <__sflush_r+0x18>
 80031ba:	0793      	lsls	r3, r2, #30
 80031bc:	bf18      	it	ne
 80031be:	2300      	movne	r3, #0
 80031c0:	680e      	ldr	r6, [r1, #0]
 80031c2:	bf08      	it	eq
 80031c4:	694b      	ldreq	r3, [r1, #20]
 80031c6:	1bf6      	subs	r6, r6, r7
 80031c8:	600f      	str	r7, [r1, #0]
 80031ca:	608b      	str	r3, [r1, #8]
 80031cc:	2e00      	cmp	r6, #0
 80031ce:	dd9f      	ble.n	8003110 <__sflush_r+0x18>
 80031d0:	4633      	mov	r3, r6
 80031d2:	463a      	mov	r2, r7
 80031d4:	4628      	mov	r0, r5
 80031d6:	6a21      	ldr	r1, [r4, #32]
 80031d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80031dc:	47e0      	blx	ip
 80031de:	2800      	cmp	r0, #0
 80031e0:	dc06      	bgt.n	80031f0 <__sflush_r+0xf8>
 80031e2:	89a3      	ldrh	r3, [r4, #12]
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ec:	81a3      	strh	r3, [r4, #12]
 80031ee:	e790      	b.n	8003112 <__sflush_r+0x1a>
 80031f0:	4407      	add	r7, r0
 80031f2:	1a36      	subs	r6, r6, r0
 80031f4:	e7ea      	b.n	80031cc <__sflush_r+0xd4>
 80031f6:	bf00      	nop
 80031f8:	20400001 	.word	0x20400001

080031fc <_fflush_r>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	690b      	ldr	r3, [r1, #16]
 8003200:	4605      	mov	r5, r0
 8003202:	460c      	mov	r4, r1
 8003204:	b913      	cbnz	r3, 800320c <_fflush_r+0x10>
 8003206:	2500      	movs	r5, #0
 8003208:	4628      	mov	r0, r5
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	b118      	cbz	r0, 8003216 <_fflush_r+0x1a>
 800320e:	6983      	ldr	r3, [r0, #24]
 8003210:	b90b      	cbnz	r3, 8003216 <_fflush_r+0x1a>
 8003212:	f7ff fa19 	bl	8002648 <__sinit>
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <_fflush_r+0x6c>)
 8003218:	429c      	cmp	r4, r3
 800321a:	d11b      	bne.n	8003254 <_fflush_r+0x58>
 800321c:	686c      	ldr	r4, [r5, #4]
 800321e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ef      	beq.n	8003206 <_fflush_r+0xa>
 8003226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003228:	07d0      	lsls	r0, r2, #31
 800322a:	d404      	bmi.n	8003236 <_fflush_r+0x3a>
 800322c:	0599      	lsls	r1, r3, #22
 800322e:	d402      	bmi.n	8003236 <_fflush_r+0x3a>
 8003230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003232:	f7ff faa7 	bl	8002784 <__retarget_lock_acquire_recursive>
 8003236:	4628      	mov	r0, r5
 8003238:	4621      	mov	r1, r4
 800323a:	f7ff ff5d 	bl	80030f8 <__sflush_r>
 800323e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003240:	4605      	mov	r5, r0
 8003242:	07da      	lsls	r2, r3, #31
 8003244:	d4e0      	bmi.n	8003208 <_fflush_r+0xc>
 8003246:	89a3      	ldrh	r3, [r4, #12]
 8003248:	059b      	lsls	r3, r3, #22
 800324a:	d4dd      	bmi.n	8003208 <_fflush_r+0xc>
 800324c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800324e:	f7ff fa9a 	bl	8002786 <__retarget_lock_release_recursive>
 8003252:	e7d9      	b.n	8003208 <_fflush_r+0xc>
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <_fflush_r+0x70>)
 8003256:	429c      	cmp	r4, r3
 8003258:	d101      	bne.n	800325e <_fflush_r+0x62>
 800325a:	68ac      	ldr	r4, [r5, #8]
 800325c:	e7df      	b.n	800321e <_fflush_r+0x22>
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <_fflush_r+0x74>)
 8003260:	429c      	cmp	r4, r3
 8003262:	bf08      	it	eq
 8003264:	68ec      	ldreq	r4, [r5, #12]
 8003266:	e7da      	b.n	800321e <_fflush_r+0x22>
 8003268:	08003518 	.word	0x08003518
 800326c:	08003538 	.word	0x08003538
 8003270:	080034f8 	.word	0x080034f8

08003274 <_lseek_r>:
 8003274:	b538      	push	{r3, r4, r5, lr}
 8003276:	4604      	mov	r4, r0
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	2200      	movs	r2, #0
 800327e:	4d05      	ldr	r5, [pc, #20]	; (8003294 <_lseek_r+0x20>)
 8003280:	602a      	str	r2, [r5, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	f7fd fa0a 	bl	800069c <_lseek>
 8003288:	1c43      	adds	r3, r0, #1
 800328a:	d102      	bne.n	8003292 <_lseek_r+0x1e>
 800328c:	682b      	ldr	r3, [r5, #0]
 800328e:	b103      	cbz	r3, 8003292 <_lseek_r+0x1e>
 8003290:	6023      	str	r3, [r4, #0]
 8003292:	bd38      	pop	{r3, r4, r5, pc}
 8003294:	20000118 	.word	0x20000118

08003298 <__swhatbuf_r>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	460e      	mov	r6, r1
 800329c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a0:	4614      	mov	r4, r2
 80032a2:	2900      	cmp	r1, #0
 80032a4:	461d      	mov	r5, r3
 80032a6:	b096      	sub	sp, #88	; 0x58
 80032a8:	da08      	bge.n	80032bc <__swhatbuf_r+0x24>
 80032aa:	2200      	movs	r2, #0
 80032ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80032b0:	602a      	str	r2, [r5, #0]
 80032b2:	061a      	lsls	r2, r3, #24
 80032b4:	d410      	bmi.n	80032d8 <__swhatbuf_r+0x40>
 80032b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ba:	e00e      	b.n	80032da <__swhatbuf_r+0x42>
 80032bc:	466a      	mov	r2, sp
 80032be:	f000 f8c5 	bl	800344c <_fstat_r>
 80032c2:	2800      	cmp	r0, #0
 80032c4:	dbf1      	blt.n	80032aa <__swhatbuf_r+0x12>
 80032c6:	9a01      	ldr	r2, [sp, #4]
 80032c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032d0:	425a      	negs	r2, r3
 80032d2:	415a      	adcs	r2, r3
 80032d4:	602a      	str	r2, [r5, #0]
 80032d6:	e7ee      	b.n	80032b6 <__swhatbuf_r+0x1e>
 80032d8:	2340      	movs	r3, #64	; 0x40
 80032da:	2000      	movs	r0, #0
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	b016      	add	sp, #88	; 0x58
 80032e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080032e4 <__smakebuf_r>:
 80032e4:	898b      	ldrh	r3, [r1, #12]
 80032e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032e8:	079d      	lsls	r5, r3, #30
 80032ea:	4606      	mov	r6, r0
 80032ec:	460c      	mov	r4, r1
 80032ee:	d507      	bpl.n	8003300 <__smakebuf_r+0x1c>
 80032f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032f4:	6023      	str	r3, [r4, #0]
 80032f6:	6123      	str	r3, [r4, #16]
 80032f8:	2301      	movs	r3, #1
 80032fa:	6163      	str	r3, [r4, #20]
 80032fc:	b002      	add	sp, #8
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	466a      	mov	r2, sp
 8003302:	ab01      	add	r3, sp, #4
 8003304:	f7ff ffc8 	bl	8003298 <__swhatbuf_r>
 8003308:	9900      	ldr	r1, [sp, #0]
 800330a:	4605      	mov	r5, r0
 800330c:	4630      	mov	r0, r6
 800330e:	f7ff fa5b 	bl	80027c8 <_malloc_r>
 8003312:	b948      	cbnz	r0, 8003328 <__smakebuf_r+0x44>
 8003314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003318:	059a      	lsls	r2, r3, #22
 800331a:	d4ef      	bmi.n	80032fc <__smakebuf_r+0x18>
 800331c:	f023 0303 	bic.w	r3, r3, #3
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	81a3      	strh	r3, [r4, #12]
 8003326:	e7e3      	b.n	80032f0 <__smakebuf_r+0xc>
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <__smakebuf_r+0x7c>)
 800332a:	62b3      	str	r3, [r6, #40]	; 0x28
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	6020      	str	r0, [r4, #0]
 8003330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003334:	81a3      	strh	r3, [r4, #12]
 8003336:	9b00      	ldr	r3, [sp, #0]
 8003338:	6120      	str	r0, [r4, #16]
 800333a:	6163      	str	r3, [r4, #20]
 800333c:	9b01      	ldr	r3, [sp, #4]
 800333e:	b15b      	cbz	r3, 8003358 <__smakebuf_r+0x74>
 8003340:	4630      	mov	r0, r6
 8003342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003346:	f000 f893 	bl	8003470 <_isatty_r>
 800334a:	b128      	cbz	r0, 8003358 <__smakebuf_r+0x74>
 800334c:	89a3      	ldrh	r3, [r4, #12]
 800334e:	f023 0303 	bic.w	r3, r3, #3
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	81a3      	strh	r3, [r4, #12]
 8003358:	89a0      	ldrh	r0, [r4, #12]
 800335a:	4305      	orrs	r5, r0
 800335c:	81a5      	strh	r5, [r4, #12]
 800335e:	e7cd      	b.n	80032fc <__smakebuf_r+0x18>
 8003360:	080025e1 	.word	0x080025e1

08003364 <memchr>:
 8003364:	4603      	mov	r3, r0
 8003366:	b510      	push	{r4, lr}
 8003368:	b2c9      	uxtb	r1, r1
 800336a:	4402      	add	r2, r0
 800336c:	4293      	cmp	r3, r2
 800336e:	4618      	mov	r0, r3
 8003370:	d101      	bne.n	8003376 <memchr+0x12>
 8003372:	2000      	movs	r0, #0
 8003374:	e003      	b.n	800337e <memchr+0x1a>
 8003376:	7804      	ldrb	r4, [r0, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	428c      	cmp	r4, r1
 800337c:	d1f6      	bne.n	800336c <memchr+0x8>
 800337e:	bd10      	pop	{r4, pc}

08003380 <__malloc_lock>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__malloc_lock+0x8>)
 8003382:	f7ff b9ff 	b.w	8002784 <__retarget_lock_acquire_recursive>
 8003386:	bf00      	nop
 8003388:	2000010c 	.word	0x2000010c

0800338c <__malloc_unlock>:
 800338c:	4801      	ldr	r0, [pc, #4]	; (8003394 <__malloc_unlock+0x8>)
 800338e:	f7ff b9fa 	b.w	8002786 <__retarget_lock_release_recursive>
 8003392:	bf00      	nop
 8003394:	2000010c 	.word	0x2000010c

08003398 <_free_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	4605      	mov	r5, r0
 800339c:	2900      	cmp	r1, #0
 800339e:	d040      	beq.n	8003422 <_free_r+0x8a>
 80033a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033a4:	1f0c      	subs	r4, r1, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bfb8      	it	lt
 80033aa:	18e4      	addlt	r4, r4, r3
 80033ac:	f7ff ffe8 	bl	8003380 <__malloc_lock>
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <_free_r+0x8c>)
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	b933      	cbnz	r3, 80033c4 <_free_r+0x2c>
 80033b6:	6063      	str	r3, [r4, #4]
 80033b8:	6014      	str	r4, [r2, #0]
 80033ba:	4628      	mov	r0, r5
 80033bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033c0:	f7ff bfe4 	b.w	800338c <__malloc_unlock>
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	d908      	bls.n	80033da <_free_r+0x42>
 80033c8:	6820      	ldr	r0, [r4, #0]
 80033ca:	1821      	adds	r1, r4, r0
 80033cc:	428b      	cmp	r3, r1
 80033ce:	bf01      	itttt	eq
 80033d0:	6819      	ldreq	r1, [r3, #0]
 80033d2:	685b      	ldreq	r3, [r3, #4]
 80033d4:	1809      	addeq	r1, r1, r0
 80033d6:	6021      	streq	r1, [r4, #0]
 80033d8:	e7ed      	b.n	80033b6 <_free_r+0x1e>
 80033da:	461a      	mov	r2, r3
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	b10b      	cbz	r3, 80033e4 <_free_r+0x4c>
 80033e0:	42a3      	cmp	r3, r4
 80033e2:	d9fa      	bls.n	80033da <_free_r+0x42>
 80033e4:	6811      	ldr	r1, [r2, #0]
 80033e6:	1850      	adds	r0, r2, r1
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d10b      	bne.n	8003404 <_free_r+0x6c>
 80033ec:	6820      	ldr	r0, [r4, #0]
 80033ee:	4401      	add	r1, r0
 80033f0:	1850      	adds	r0, r2, r1
 80033f2:	4283      	cmp	r3, r0
 80033f4:	6011      	str	r1, [r2, #0]
 80033f6:	d1e0      	bne.n	80033ba <_free_r+0x22>
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4401      	add	r1, r0
 80033fe:	6011      	str	r1, [r2, #0]
 8003400:	6053      	str	r3, [r2, #4]
 8003402:	e7da      	b.n	80033ba <_free_r+0x22>
 8003404:	d902      	bls.n	800340c <_free_r+0x74>
 8003406:	230c      	movs	r3, #12
 8003408:	602b      	str	r3, [r5, #0]
 800340a:	e7d6      	b.n	80033ba <_free_r+0x22>
 800340c:	6820      	ldr	r0, [r4, #0]
 800340e:	1821      	adds	r1, r4, r0
 8003410:	428b      	cmp	r3, r1
 8003412:	bf01      	itttt	eq
 8003414:	6819      	ldreq	r1, [r3, #0]
 8003416:	685b      	ldreq	r3, [r3, #4]
 8003418:	1809      	addeq	r1, r1, r0
 800341a:	6021      	streq	r1, [r4, #0]
 800341c:	6063      	str	r3, [r4, #4]
 800341e:	6054      	str	r4, [r2, #4]
 8003420:	e7cb      	b.n	80033ba <_free_r+0x22>
 8003422:	bd38      	pop	{r3, r4, r5, pc}
 8003424:	20000110 	.word	0x20000110

08003428 <_read_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4604      	mov	r4, r0
 800342c:	4608      	mov	r0, r1
 800342e:	4611      	mov	r1, r2
 8003430:	2200      	movs	r2, #0
 8003432:	4d05      	ldr	r5, [pc, #20]	; (8003448 <_read_r+0x20>)
 8003434:	602a      	str	r2, [r5, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	f7fd f8d3 	bl	80005e2 <_read>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d102      	bne.n	8003446 <_read_r+0x1e>
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	b103      	cbz	r3, 8003446 <_read_r+0x1e>
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	bd38      	pop	{r3, r4, r5, pc}
 8003448:	20000118 	.word	0x20000118

0800344c <_fstat_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	2300      	movs	r3, #0
 8003450:	4d06      	ldr	r5, [pc, #24]	; (800346c <_fstat_r+0x20>)
 8003452:	4604      	mov	r4, r0
 8003454:	4608      	mov	r0, r1
 8003456:	4611      	mov	r1, r2
 8003458:	602b      	str	r3, [r5, #0]
 800345a:	f7fd f906 	bl	800066a <_fstat>
 800345e:	1c43      	adds	r3, r0, #1
 8003460:	d102      	bne.n	8003468 <_fstat_r+0x1c>
 8003462:	682b      	ldr	r3, [r5, #0]
 8003464:	b103      	cbz	r3, 8003468 <_fstat_r+0x1c>
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	bd38      	pop	{r3, r4, r5, pc}
 800346a:	bf00      	nop
 800346c:	20000118 	.word	0x20000118

08003470 <_isatty_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	2300      	movs	r3, #0
 8003474:	4d05      	ldr	r5, [pc, #20]	; (800348c <_isatty_r+0x1c>)
 8003476:	4604      	mov	r4, r0
 8003478:	4608      	mov	r0, r1
 800347a:	602b      	str	r3, [r5, #0]
 800347c:	f7fd f904 	bl	8000688 <_isatty>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d102      	bne.n	800348a <_isatty_r+0x1a>
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	b103      	cbz	r3, 800348a <_isatty_r+0x1a>
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	20000118 	.word	0x20000118

08003490 <_init>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	bf00      	nop
 8003494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003496:	bc08      	pop	{r3}
 8003498:	469e      	mov	lr, r3
 800349a:	4770      	bx	lr

0800349c <_fini>:
 800349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349e:	bf00      	nop
 80034a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a2:	bc08      	pop	{r3}
 80034a4:	469e      	mov	lr, r3
 80034a6:	4770      	bx	lr
